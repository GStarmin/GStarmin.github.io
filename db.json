{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/动态规划/最短路径.png","path":"img/动态规划/最短路径.png","modified":1,"renderable":0},{"_id":"source/img/动态规划/最长上升子序列代码.jpg","path":"img/动态规划/最长上升子序列代码.jpg","modified":1,"renderable":0},{"_id":"source/img/动态规划/状态转移方程.svg","path":"img/动态规划/状态转移方程.svg","modified":1,"renderable":0},{"_id":"source/img/动态规划/解决方案.jpg","path":"img/动态规划/解决方案.jpg","modified":1,"renderable":0},{"_id":"source/img/胜者树败者树/fig1.jpg","path":"img/胜者树败者树/fig1.jpg","modified":1,"renderable":0},{"_id":"source/img/胜者树败者树/fig2.jpg","path":"img/胜者树败者树/fig2.jpg","modified":1,"renderable":0},{"_id":"source/img/胜者树败者树/fig3.jpg","path":"img/胜者树败者树/fig3.jpg","modified":1,"renderable":0},{"_id":"source/img/胜者树败者树/fig4.jpg","path":"img/胜者树败者树/fig4.jpg","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Git常用命令.md","hash":"70fbbf3fda3966c1651f31624918f0895c5940b9","modified":1669954754099},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1669954345251},{"_id":"source/_posts/红黑树.md","hash":"507978407f007feec8ffa98ac94f6a676f8e8d4f","modified":1669955740611},{"_id":"source/_posts/动态规划.md","hash":"0b6960bccee1ea7b60c89f2775d9b0f21208b8f9","modified":1669956691690},{"_id":"source/_posts/胜者树败者树.md","hash":"cce8c12837f9bda7518322582e5c6fd64e590a52","modified":1669956773507},{"_id":"source/img/动态规划/最短路径.png","hash":"0ba147ab707a0e36e3051bff42d30cbaa6759c63","modified":1646917567601},{"_id":"source/about/index.md","hash":"9aefab0ac381b3378b472ea3ff97de5a58274e89","modified":1669955882134},{"_id":"source/img/动态规划/最长上升子序列代码.jpg","hash":"d0c1dbb9c49b2b4264b9e6eca7971f38d06e5455","modified":1646918693344},{"_id":"source/img/动态规划/状态转移方程.svg","hash":"8b5734d7212db7f4d24e95f2d422d7f1c6defb1d","modified":1646918590917},{"_id":"source/img/动态规划/解决方案.jpg","hash":"8500d51aa92b8cf3e1a4faa475de9524d179f978","modified":1646917030251},{"_id":"source/img/胜者树败者树/fig3.jpg","hash":"f65abc86102943457c2fd7f4de3bc2ca6e9ff8ff","modified":1647227136005},{"_id":"source/img/胜者树败者树/fig1.jpg","hash":"97867bf0b5eeedc2a763d42b0ddf3a489ee2a08d","modified":1647227120629},{"_id":"source/img/胜者树败者树/fig2.jpg","hash":"daaf81658569b19710523c650f4a1c95fa46db4b","modified":1647227127787},{"_id":"source/img/胜者树败者树/fig4.jpg","hash":"8f104f440e15af2f0fa833339e76b58e1c0fc1ee","modified":1647227141329},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1669908961622},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1669908959152},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1669908959661},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1669908961627},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1669908961628},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1669908961628},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1669908961627},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1669908961628},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1669908961629},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1669908961629},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1669908961634},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1669908959159},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1669908959160},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1669908959661},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1669908959166},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1669908959459},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1669908959170},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1669908959439},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1669908959459},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1669908959460},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1669908959465},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1669908959465},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1669908959468},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1669908961632},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1669908961633},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1669908959469},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1669908959166},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1669908959437},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1669908959447},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1669908959458},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1669908959433},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1669908959449},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1669908959456},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1669908959457},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1669908959649},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1669908959461},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1669908959465},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1669908959645},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1669908959653},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1669908959657},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1669908959467},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1669908959643},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1669908959466},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1669908959658},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1669908959645},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1669908959646},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1669908959653},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1669908959649},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1669908959650},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1669908959659},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1669908959659},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669908959157},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1669908959657},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1669908959661},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1669908959660},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1669908959640},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1669908959657},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1669908961612},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1669908959659},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1669908959659},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1669908959636},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1669908959636},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1669908959647},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1669908959655},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1669908961617},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1669908961613},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669908959663},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1669908959650},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669908959626},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669908961299},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669908961589},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669908961625},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669908959634},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1669908959656},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669908959638},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669908959648},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669908959646},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669908959658},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669908959653},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669908959660},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669908959652},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1669908959441},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1669908959451},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1669908959456},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1669908959453},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1669908959461},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1669908959471},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1669908959457},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1669908959466},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1669908959642},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1669908959647},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1669908959648},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1669908959648},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1669908959472},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1669908959649},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1669908959652},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1669908959471},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1669908959654},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1669908959169},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1669908959468},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1669908959472},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1669908959173},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1669908959448},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1669908959462},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1669908959464},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1669908959468},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1669908959470},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1669908959164},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1669908959455},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1669908959444},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1669908959459},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1669908959462},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1669908959455},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1669908959462},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1669908959471},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1669908959168},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1669908961601},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1669908961602},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1669908959464},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1669908961604},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1669908961603},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1669908961620},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1669908961608},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1669908961615},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1669908961606},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1669908961615},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1669908961607},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1669908961598},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1669908961606},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1669908959464},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1669908961614},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1669908961616},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1669908961609},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1669908961617},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1669908961592},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1669908961624},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1669908961613},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1669908961596},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1669908961621},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1669908961620},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1669908961605},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1669908961600},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1669908961607},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1669908961610},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1669908961610},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1669908961610},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1669908961618},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1669908961611},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1669908961618},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1669908961619},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1669908961621},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1669908961620},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1669908959162},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1669908961622},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1669908961624},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1669908961622},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1669908959468},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669908961297},{"_id":"public/local-search.xml","hash":"664cf8365aef25bf4e18f163a64c1f97fc72a0d7","modified":1669957005979},{"_id":"public/about/index.html","hash":"bae95cc7ee9ab822ee438aabbb6e0741607d674b","modified":1669957005979},{"_id":"public/archives/index.html","hash":"df6de633fe413477d1b5e2f9feb78a7d9b7cbca8","modified":1669957005979},{"_id":"public/archives/2022/index.html","hash":"ceb7cb9810160677fd0fdbcb1f2c15d4b1cd2eaf","modified":1669957005979},{"_id":"public/archives/2022/12/index.html","hash":"468a8cd8436e458b8c586798ff7245fc2fed62b5","modified":1669957005979},{"_id":"public/categories/算法/index.html","hash":"ff3079387de33484c90906a0fb3feb0b18f0d249","modified":1669957005979},{"_id":"public/404.html","hash":"d757a815a94d7ff6c5d4421d950845c094e350ce","modified":1669957005979},{"_id":"public/tags/算法/index.html","hash":"a24618f6f02994e13334572da64c1fb9bb35ead5","modified":1669957005979},{"_id":"public/tags/index.html","hash":"50c3afa5619d8e93849c8fd6d2cf91b6175587fc","modified":1669957005979},{"_id":"public/links/index.html","hash":"3a7434f62e9e2be703edcc949aa1bed971d78e3b","modified":1669957005979},{"_id":"public/categories/index.html","hash":"fef817f44c553078e9758978eb226c0f8f7be203","modified":1669957005979},{"_id":"public/2022/12/02/动态规划/index.html","hash":"3d4a6ac97c3a5585d14af6d0e0a3826a3c7df269","modified":1669957005979},{"_id":"public/2022/12/02/胜者树败者树/index.html","hash":"dd76bf0925571b86cc6333b5481cb90064542728","modified":1669957005979},{"_id":"public/2022/12/02/红黑树/index.html","hash":"91cebeb4df033cacf343c3e7b1bf26fe0981515f","modified":1669957005979},{"_id":"public/2022/12/02/Git常用命令/index.html","hash":"9813d8c26e77ad174c3b9531b182f6848c27dab0","modified":1669957005979},{"_id":"public/2022/12/01/hello-world/index.html","hash":"1ae42362733d9cecac8842f5f4aaa271645e396e","modified":1669957005979},{"_id":"public/index.html","hash":"9988a353c03eae1b00ea1b0877aa84de2a290acd","modified":1669957005979},{"_id":"public/img/动态规划/最短路径.png","hash":"0ba147ab707a0e36e3051bff42d30cbaa6759c63","modified":1669957005979},{"_id":"public/img/动态规划/最长上升子序列代码.jpg","hash":"d0c1dbb9c49b2b4264b9e6eca7971f38d06e5455","modified":1669957005979},{"_id":"public/img/动态规划/解决方案.jpg","hash":"8500d51aa92b8cf3e1a4faa475de9524d179f978","modified":1669957005979},{"_id":"public/img/胜者树败者树/fig1.jpg","hash":"97867bf0b5eeedc2a763d42b0ddf3a489ee2a08d","modified":1669957005979},{"_id":"public/img/动态规划/状态转移方程.svg","hash":"8b5734d7212db7f4d24e95f2d422d7f1c6defb1d","modified":1669957005979},{"_id":"public/img/胜者树败者树/fig3.jpg","hash":"f65abc86102943457c2fd7f4de3bc2ca6e9ff8ff","modified":1669957005979},{"_id":"public/img/胜者树败者树/fig2.jpg","hash":"daaf81658569b19710523c650f4a1c95fa46db4b","modified":1669957005979},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669957005979},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669957005979},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669957005979},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669957005979},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669957005979},{"_id":"public/img/胜者树败者树/fig4.jpg","hash":"8f104f440e15af2f0fa833339e76b58e1c0fc1ee","modified":1669957005979},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669957005979},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669957005979},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1669957005979},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669957005979},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1669957005979},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669957005979},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669957005979},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669957005979},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669957005979},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669957005979},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1669957005979},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669957005979},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669957005979}],"Category":[{"name":"算法","_id":"clb61a8pm0007lssg81zx3uxf"}],"Data":[],"Page":[{"title":"about","layout":"about","_content":"\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\n---\n\n","date":"2022-12-02T04:38:02.134Z","updated":"2022-12-02T04:38:02.134Z","path":"about/index.html","comments":1,"_id":"clb61a8pc0000lssgfih36zmn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git常用命令","_content":"\n\n## Git撤销commit命令\n当要撤销的提交不是最开始的提交时\n\tgit reset HEAD~\n当要撤销的提交时最开始的提交时\n\tgit update-ref -d HEAD\n## Git连接远程仓库\ngit remote add origin url\n注：url为github仓库链接\n## Git删除已经add的文件\n1.要删除的文件少时\n\t一种是 git rm --cached \"文件路径\"，不删除物理文件，仅将该文件从缓存中删除；\n\t一种是 git rm --f  \"文件路径\"，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。\n2.要删除的文件多时\n\tgit rm -r --cached .  清空缓存区\n\t然后将本地文件删除，再次add\n\t\n\n## Git创建远程新分支\ngit无法直接通过命令方式创建远程新分支，需要间接来创建\n这里我创建的远程新分支名叫 vedio\n首先 **git checkout --orphan 分支名**\n![](https://img-blog.csdnimg.cn/20210403164118752.png)\n**git rm -rf .** （这一步很关键）\n然后创建一个文件readme.md（其实任何文件都可以），add并commit，然后**git push origin 分支名** 就可以啦~\n如下图红框圈注的命令\n![](https://img-blog.csdnimg.cn/20210403164816128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkzOTQyMQ==,size_16,color_FFFFFF,t_70)\n## git强制提交本地分支覆盖远程分支\ngit push origin master --force\n## Git从远程仓库拉取\ngit pull origin main\n## Git创建与切换分支\n创建分支 git branch branch_name\n切换分支 git checkout branch_name\n\n\n\n\n\n\n\n\n","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\n---\n\n\n## Git撤销commit命令\n当要撤销的提交不是最开始的提交时\n\tgit reset HEAD~\n当要撤销的提交时最开始的提交时\n\tgit update-ref -d HEAD\n## Git连接远程仓库\ngit remote add origin url\n注：url为github仓库链接\n## Git删除已经add的文件\n1.要删除的文件少时\n\t一种是 git rm --cached \"文件路径\"，不删除物理文件，仅将该文件从缓存中删除；\n\t一种是 git rm --f  \"文件路径\"，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。\n2.要删除的文件多时\n\tgit rm -r --cached .  清空缓存区\n\t然后将本地文件删除，再次add\n\t\n\n## Git创建远程新分支\ngit无法直接通过命令方式创建远程新分支，需要间接来创建\n这里我创建的远程新分支名叫 vedio\n首先 **git checkout --orphan 分支名**\n![](https://img-blog.csdnimg.cn/20210403164118752.png)\n**git rm -rf .** （这一步很关键）\n然后创建一个文件readme.md（其实任何文件都可以），add并commit，然后**git push origin 分支名** 就可以啦~\n如下图红框圈注的命令\n![](https://img-blog.csdnimg.cn/20210403164816128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkzOTQyMQ==,size_16,color_FFFFFF,t_70)\n## git强制提交本地分支覆盖远程分支\ngit push origin master --force\n## Git从远程仓库拉取\ngit pull origin main\n## Git创建与切换分支\n创建分支 git branch branch_name\n切换分支 git checkout branch_name\n\n\n\n\n\n\n\n\n","slug":"Git常用命令","published":1,"date":"2022-12-02T04:17:50.606Z","updated":"2022-12-02T04:19:14.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61a8pe0001lssg2k93efrr","content":"<h2 id=\"Git撤销commit命令\"><a href=\"#Git撤销commit命令\" class=\"headerlink\" title=\"Git撤销commit命令\"></a>Git撤销commit命令</h2><p>当要撤销的提交不是最开始的提交时<br>    git reset HEAD~<br>当要撤销的提交时最开始的提交时<br>    git update-ref -d HEAD</p>\n<h2 id=\"Git连接远程仓库\"><a href=\"#Git连接远程仓库\" class=\"headerlink\" title=\"Git连接远程仓库\"></a>Git连接远程仓库</h2><p>git remote add origin url<br>注：url为github仓库链接</p>\n<h2 id=\"Git删除已经add的文件\"><a href=\"#Git删除已经add的文件\" class=\"headerlink\" title=\"Git删除已经add的文件\"></a>Git删除已经add的文件</h2><p>1.要删除的文件少时<br>    一种是 git rm –cached “文件路径”，不删除物理文件，仅将该文件从缓存中删除；<br>    一种是 git rm –f  “文件路径”，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。<br>2.要删除的文件多时<br>    git rm -r –cached .  清空缓存区<br>    然后将本地文件删除，再次add</p>\n<h2 id=\"Git创建远程新分支\"><a href=\"#Git创建远程新分支\" class=\"headerlink\" title=\"Git创建远程新分支\"></a>Git创建远程新分支</h2><p>git无法直接通过命令方式创建远程新分支，需要间接来创建<br>这里我创建的远程新分支名叫 vedio<br>首先 <strong>git checkout –orphan 分支名</strong><br><img src=\"https://img-blog.csdnimg.cn/20210403164118752.png\"><br><strong>git rm -rf .</strong> （这一步很关键）<br>然后创建一个文件readme.md（其实任何文件都可以），add并commit，然后<strong>git push origin 分支名</strong> 就可以啦~<br>如下图红框圈注的命令<br><img src=\"https://img-blog.csdnimg.cn/20210403164816128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkzOTQyMQ==,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"git强制提交本地分支覆盖远程分支\"><a href=\"#git强制提交本地分支覆盖远程分支\" class=\"headerlink\" title=\"git强制提交本地分支覆盖远程分支\"></a>git强制提交本地分支覆盖远程分支</h2><p>git push origin master –force</p>\n<h2 id=\"Git从远程仓库拉取\"><a href=\"#Git从远程仓库拉取\" class=\"headerlink\" title=\"Git从远程仓库拉取\"></a>Git从远程仓库拉取</h2><p>git pull origin main</p>\n<h2 id=\"Git创建与切换分支\"><a href=\"#Git创建与切换分支\" class=\"headerlink\" title=\"Git创建与切换分支\"></a>Git创建与切换分支</h2><p>创建分支 git branch branch_name<br>切换分支 git checkout branch_name</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Git撤销commit命令\"><a href=\"#Git撤销commit命令\" class=\"headerlink\" title=\"Git撤销commit命令\"></a>Git撤销commit命令</h2><p>当要撤销的提交不是最开始的提交时<br>    git reset HEAD~<br>当要撤销的提交时最开始的提交时<br>    git update-ref -d HEAD</p>\n<h2 id=\"Git连接远程仓库\"><a href=\"#Git连接远程仓库\" class=\"headerlink\" title=\"Git连接远程仓库\"></a>Git连接远程仓库</h2><p>git remote add origin url<br>注：url为github仓库链接</p>\n<h2 id=\"Git删除已经add的文件\"><a href=\"#Git删除已经add的文件\" class=\"headerlink\" title=\"Git删除已经add的文件\"></a>Git删除已经add的文件</h2><p>1.要删除的文件少时<br>    一种是 git rm –cached “文件路径”，不删除物理文件，仅将该文件从缓存中删除；<br>    一种是 git rm –f  “文件路径”，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。<br>2.要删除的文件多时<br>    git rm -r –cached .  清空缓存区<br>    然后将本地文件删除，再次add</p>\n<h2 id=\"Git创建远程新分支\"><a href=\"#Git创建远程新分支\" class=\"headerlink\" title=\"Git创建远程新分支\"></a>Git创建远程新分支</h2><p>git无法直接通过命令方式创建远程新分支，需要间接来创建<br>这里我创建的远程新分支名叫 vedio<br>首先 <strong>git checkout –orphan 分支名</strong><br><img src=\"https://img-blog.csdnimg.cn/20210403164118752.png\"><br><strong>git rm -rf .</strong> （这一步很关键）<br>然后创建一个文件readme.md（其实任何文件都可以），add并commit，然后<strong>git push origin 分支名</strong> 就可以啦~<br>如下图红框圈注的命令<br><img src=\"https://img-blog.csdnimg.cn/20210403164816128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkzOTQyMQ==,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"git强制提交本地分支覆盖远程分支\"><a href=\"#git强制提交本地分支覆盖远程分支\" class=\"headerlink\" title=\"git强制提交本地分支覆盖远程分支\"></a>git强制提交本地分支覆盖远程分支</h2><p>git push origin master –force</p>\n<h2 id=\"Git从远程仓库拉取\"><a href=\"#Git从远程仓库拉取\" class=\"headerlink\" title=\"Git从远程仓库拉取\"></a>Git从远程仓库拉取</h2><p>git pull origin main</p>\n<h2 id=\"Git创建与切换分支\"><a href=\"#Git创建与切换分支\" class=\"headerlink\" title=\"Git创建与切换分支\"></a>Git创建与切换分支</h2><p>创建分支 git branch branch_name<br>切换分支 git checkout branch_name</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-12-01T15:29:42.832Z","updated":"2022-12-02T04:12:25.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61a8ph0002lssg9xce1i4n","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo server<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo generate<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">$ hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"红黑树","categorires":"算法","_content":"\n\n# 红黑树\n红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。 \n\n它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。\n\n## 红黑树的性质\n1. 每个节点要么是黑色，要么是红色。\n2. 根节点是黑色。\n3. 每个叶子节点（NIL）是黑色。\n4. 每个红色结点的两个子结点一定都是黑色\n5. 任意一结点到每个叶子结点的路径都包含数量相同的黑结点。（保证这棵树尽量是平衡的。）\n\n由性质5我们可以推出：  \n    性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点。\n\n## 红黑树和AVL的区别\n1. 如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。\n\n2. 其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。\n\n3. map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。","source":"_posts/红黑树.md","raw":"---\ntitle: 红黑树\ncategorires: 算法\ntags: 算法\n---\n\n\n# 红黑树\n红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。 \n\n它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。\n\n## 红黑树的性质\n1. 每个节点要么是黑色，要么是红色。\n2. 根节点是黑色。\n3. 每个叶子节点（NIL）是黑色。\n4. 每个红色结点的两个子结点一定都是黑色\n5. 任意一结点到每个叶子结点的路径都包含数量相同的黑结点。（保证这棵树尽量是平衡的。）\n\n由性质5我们可以推出：  \n    性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点。\n\n## 红黑树和AVL的区别\n1. 如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。\n\n2. 其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。\n\n3. map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。","slug":"红黑树","published":1,"date":"2022-12-02T04:29:47.325Z","updated":"2022-12-02T04:35:40.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61a8pi0003lssgdfjjfj29","content":"<h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1><p>红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。 </p>\n<p>它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。</p>\n<h2 id=\"红黑树的性质\"><a href=\"#红黑树的性质\" class=\"headerlink\" title=\"红黑树的性质\"></a>红黑树的性质</h2><ol>\n<li>每个节点要么是黑色，要么是红色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点（NIL）是黑色。</li>\n<li>每个红色结点的两个子结点一定都是黑色</li>\n<li>任意一结点到每个叶子结点的路径都包含数量相同的黑结点。（保证这棵树尽量是平衡的。）</li>\n</ol>\n<p>由性质5我们可以推出：<br>    性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点。</p>\n<h2 id=\"红黑树和AVL的区别\"><a href=\"#红黑树和AVL的区别\" class=\"headerlink\" title=\"红黑树和AVL的区别\"></a>红黑树和AVL的区别</h2><ol>\n<li><p>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</p>\n</li>\n<li><p>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</p>\n</li>\n<li><p>map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1><p>红黑树是一种特化的AVL树（平衡二叉树），都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。 </p>\n<p>它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的： 它可以在O(log n)时间内做查找，插入和删除，这里的n 是树中元素的数目。</p>\n<h2 id=\"红黑树的性质\"><a href=\"#红黑树的性质\" class=\"headerlink\" title=\"红黑树的性质\"></a>红黑树的性质</h2><ol>\n<li>每个节点要么是黑色，要么是红色。</li>\n<li>根节点是黑色。</li>\n<li>每个叶子节点（NIL）是黑色。</li>\n<li>每个红色结点的两个子结点一定都是黑色</li>\n<li>任意一结点到每个叶子结点的路径都包含数量相同的黑结点。（保证这棵树尽量是平衡的。）</li>\n</ol>\n<p>由性质5我们可以推出：<br>    性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点。</p>\n<h2 id=\"红黑树和AVL的区别\"><a href=\"#红黑树和AVL的区别\" class=\"headerlink\" title=\"红黑树和AVL的区别\"></a>红黑树和AVL的区别</h2><ol>\n<li><p>如果插入一个node引起了树的不平衡，AVL和RB-Tree都是最多只需要2次旋转操作，即两者都是O(1)；但是在删除node引起树的不平衡时，最坏情况下，AVL需要维护从被删node到root这条路径上所有node的平衡性，因此需要旋转的量级O(logN)，而RB-Tree最多只需3次旋转，只需要O(1)的复杂度。</p>\n</li>\n<li><p>其次，AVL的结构相较RB-Tree来说更为平衡，在插入和删除node更容易引起Tree的unbalance，因此在大量数据需要插入或者删除时，AVL需要rebalance的频率会更高。因此，RB-Tree在需要大量插入和删除node的场景下，效率更高。自然，由于AVL高度平衡，因此AVL的search效率更高。</p>\n</li>\n<li><p>map的实现只是折衷了两者在search、insert以及delete下的效率。总体来说，RB-tree的统计性能是高于AVL的。</p>\n</li>\n</ol>\n"},{"title":"动态规划","_content":"\n本文大部分转载自知乎[@阮行止](https://www.zhihu.com/people/ruan-xing-zhi)，后添加了自己的一些思考。\n\n## 1. 从一个生活问题谈起\n先来看看生活中经常遇到的事吧——假设您是个土豪，身上带了足够的1、5、10、20、50、100元面值的钞票。现在您的目标是凑出某个金额w，**需要用到尽量少的钞票**。\n\n依据生活经验，我们显然可以采取这样的策略：能用100的就尽量用100的，否则尽量用50的……依次类推。在这种策略下，666=6×100+1×50+1×10+1×5+1×1，共使用了10张钞票。\n\n这种策略称为“**贪心**”：假设我们面对的局面是“需要凑出w”，贪心策略会**尽快**让w变得更小。能让w少100就尽量让它少100，这样我们接下来面对的局面就是凑出w-100。长期的生活经验表明，贪心策略是正确的。\n\n但是，如果我们换一组钞票的面值，贪心策略就也许不成立了。如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候，贪心策略会出错：  \n　　15=1×11+4×1 （贪心策略使用了5张钞票）  \n　　15=3×5 （正确的策略，只用3张钞票）  \n　　为什么会这样呢？贪心策略错在了哪里？  \n\n**鼠目寸光**。\n\n刚刚已经说过，贪心策略的纲领是：“尽量使接下来面对的w更小”。这样，贪心策略在w=15的局面时，会优先使用11来把w降到4；但是在这个问题中，凑出4的代价是很高的，必须使用4×1。如果使用了5，w会降为10，虽然没有4那么小，但是凑出10只需要两张5元。 \n\n在这里我们发现，贪心是一种**只考虑眼前情况**的策略。\n\n那么，现在我们怎样才能避免鼠目寸光呢？\n\n如果直接暴力枚举凑出w的方案，明显复杂度过高。太多种方法可以凑出w了，枚举它们的时间是不可承受的。我们现在来尝试找一下性质。\n\n重新分析刚刚的例子。w=15时，我们如果取11，接下来就面对w=4的情况；如果取5，则接下来面对w=10的情况。我们发现这些问题都有相同的形式：“给定w，凑出w所用的最少钞票是多少张？”接下来，我们用f(n)来表示“凑出n所需的最少钞票数量”。\n\n那么，如果我们取了11，最后的代价（用掉的钞票总数）是多少呢？  \n\n明显**cost=f(4)+1=4+1=5** ，它的意义是：利用11来凑出15，付出的代价等于f(4)加上自己这一张钞票。现在我们暂时不管f(4)怎么求出来。  \n\n依次类推，马上可以知道：如果我们用5来凑出15，cost就是**f(10)+1=2+1=3** 。\n\n那么，现在w=15的时候，我们该取那种钞票呢？**当然是各种方案中，cost值最低的那一个！**\n\n- 取11：cost=f(4)+1=4+1=5\n- 取5:cost=f(10)+1=2+1=3\n- 取1:cost=f(14)+1=4+1=5\n\n显而易见，cost值最低的是取5的方案。**我们通过上面三个式子，做出了正确的决策！**\n\n这给了我们一个**至关重要**的启示—— f(n)只与f(n-1),f(n-5),f(n-11) 相关；更确切地说：\n\n> f(n)=min{f(n-1),f(n-5),f(n-11)}+1\n\n这个式子是非常激动人心的。我们要求出f(n)，只需要求出几个更小的f值；既然如此，我们从小到大把所有的f(i)求出来不就好了？注意一下边界情况即可。代码如下：\n\n![pic1](img/动态规划/解决方案.jpg)\n\n我们以O(n)的复杂度解决了这个问题。现在回过头来，我们看看它的原理：\n\n- f(n)只与f(n-1),f(n-5),f(n-11)的值有关。\n- 我们只关心f(w)的值，不关心是怎么凑出w的。\n\n这两个事实，保证了我们做法的正确性。它比起贪心策略，会分别算出取1、5、11的代价，从而做出一个正确决策，这样就避免掉了“鼠目寸光”！\n\n它与暴力的区别在哪里？我们的暴力枚举了“使用的硬币”，然而这属于冗余信息。我们要的是答案，根本不关心这个答案是怎么凑出来的。譬如，要求出f(15)，只需要知道f(14),f(10),f(4)的值。**其他信息并不需要**。我们舍弃了冗余信息。我们只记录了对解决问题有帮助的信息——f(n).\n\n我们能这样干，取决于问题的性质：求出f(n)，只需要知道几个更小的f(c)。**我们将求解f(c)称作求解f(n)的“子问题”**。\n\n**这就是DP（动态规划，dynamic programming）**.\n\n**将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解。**\n\n## 2. 几个简单的概念\n- **无后效性**  \n    一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。  \n\n要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。\n\n“**未来与过去无关**”，这就是**无后效性**。\n\n（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）\n\n- 最优子结构\n\n回顾我们对f(n)的定义：我们记“凑出n所需的最少钞票数量”为f(n).\n\nf(n)的定义就已经蕴含了“最优”。利用w=14,10,4的最优解，我们即可算出w=15的最优解。\n\n大问题的**最优解**可以由小问题的**最优解**推出，这个性质叫做“最优子结构性质”。\n\n引入这两个概念之后，我们如何判断一个问题能否使用DP解决呢？\n\n**能将大问题拆成几个小问题，且满足无后效性、最优子结构性质**。\n\n## 3. DP的典型应用：DAG最短路\n\n问题很简单：给定一个城市的地图，所有的道路都是单行道，而且不会构成环。每条道路都有过路费，问您从S点到T点花费的最少费用。\n\n![最短路径](img/动态规划/最短路径.png)\n\n这个问题能用DP解决吗？我们先试着记从S到P的最少费用为f(P).\n\n想要到T，要么经过C，要么经过D。从而$f(T)=min\\{f(C)+20,f(D)+10\\}$.\n\n好像看起来可以DP。现在我们检验刚刚那两个性质：\n\n- 无后效性：对于点P，一旦f(P)确定，以后就只关心f(P)的值，不关心怎么去的。\n- 最优子结构：对于P，我们当然只关心到P的最小费用，即f(P)。如果我们从S走到T是$S \\rightarrow P\\rightarrow Q \\rightarrow T$,那肯定S走到Q的最优路径是$S \\rightarrow P\\rightarrow Q$。对一条最优的路径而言，从S走到**沿途上所有的点（子问题）**的最优路径，都是这条大路的一部分。这个问题的最优子结构性质是显然的。\n\n既然这两个性质都满足，那么本题可以DP。式子明显为：\n\n> f(P)=min\\{f(R)+W<sub>$R \\rightarrow P$</sub>\\}\n\n其中R为有路通到P的所有的点， [公式] 为R到P的过路费。\n\n代码实现也很简单，拓扑排序即可。\n\n## 4. 对DP原理的一点讨论\n\n- DP的核心思想\n\nDP为什么会快？\n\n无论是DP还是暴力，我们的算法都是在**可能解空间**内，寻找**最优解**。\n\n来看钞票问题。暴力做法是枚举所有的可能解，这是最大的可能解空间。\n\nDP是枚举**有希望成为答案的解**。这个空间比暴力的小得多。\n\n也就是说：**DP自带剪枝**。\n\nDP舍弃了一大堆不可能成为最优解的答案。譬如：  \n　　15 = 5+5+5 被考虑了。  \n　　15 = 5+5+1+1+1+1+1 从来没有考虑过，因为这不可能成为最优解。\n\n在暴力算法中，可能解空间往往是指数级的大小；如果我们采用DP，那么有可能把解空间的大小降到多项式级。\n\n一般来说，解空间越小，寻找解就越快。这样就完成了优化。\n\n- DP的操作过程\n\n一言以蔽之：**大事化小，小事化了**。\n\n将一个大问题转化成几个小问题；  \n　　求解小问题；  \n　　推出大问题的解。\n\n- 如何设计DP算法\n\n下面介绍比较通用的设计DP算法的步骤。\n\n首先，把我们面对的局面表示为x。这一步称为设计状态。\n\n对于状态x，记我们要求出的答案(e.g. 最小费用)为f(x).我们的目标是求出f(T).\n**找出f(x)与哪些局面有关（记为p）**，写出一个式子（称为状态转移方程），通过f(p)来推出f(x).\n\n- DP三连\n\n设计DP算法，往往可以遵循DP三连：\n\n我是谁？ ——设计状态，表示局面\n\n我从哪里来？\n\n我要到哪里去？ ——设计转移\n\n设计状态是DP的基础。接下来的设计转移，有两种方式：一种是考虑我从哪里来（本文之前提到的两个例子，都是在考虑“我从哪里来”）；另一种是考虑我到哪里去，这常见于求出f(x)之后，**更新能从x走到的一些解**。这种DP也是不少的，我们以后会遇到。\n\n总而言之，“我从哪里来”和“我要到哪里去”只需要考虑清楚其中一个，就能设计出状态转移方程，从而写代码求解问题。前者又称pull型的转移，后者又称push型的转移。\n\n> 思考题：如何把钞票问题的代码改写成“我到哪里去”的形式？  \n> 提示：求出f(x)之后，更新f(x+1),f(x+5),f(x+11).\n\n## 5. 例题：最长上升子序列\n\n扯了这么多形而上的内容，还是做一道例题吧。\n\n最长上升子序列（LIS）问题：给定长度为n的序列a，从a中抽取出一个子序列，这个子序列需要单调递增。问最长的上升子序列（LIS）的长度。  \n　　e.g. 1,5,3,4,6,9,7,8的LIS为1,3,4,6,7,8，长度为6。\n\n如何设计状态（我是谁）？\n\n我们记$f(x)$为以a<sub>x</sub>结尾的LIS长度，那么答案就是 $max\\{f(x)\\}$\n\n状态x从哪里推过来（我从哪里来）？\n\n考虑比x小的每一个p：如果 a<sub>x</sub> > a<sub>p</sub>，那么$f(x)$可以取$f(p)+1$.\n\n解释：我们把 a<sub>x</sub> 接在 a<sub>p</sub> 的后面，肯定能构造一个以 a<sub>x</sub> 结尾的上升子序列，长度比以 a<sub>p</sub> 结尾的LIS大1.那么，我们可以写出状态转移方程了：\n\n![状态转移方程](img/动态规划/状态转移方程.svg)\n\n至此解决问题。两层for循环，复杂度O(n<sup>2</sup>) 。\n\n![最长上升子序列代码](img/动态规划/最长上升子序列代码.jpg)\n\n从这三个例题中可以看出，DP是一种思想，一种“大事化小，小事化了”的思想。带着这种思想，DP将会成为我们解决问题的利器。\n\n## 6. 习题\n\n如果读者有兴趣，可以试着完成下面几个习题：\n\n1. 请采取一些优化手段，以 O(n log<sub>2</sub> n) 的复杂度解决LIS问题。\n\n提示：可以参考这篇博客 [Junior Dynamic Programming--动态规划初步·各种子序列问题](https://www.luogu.com.cn/blog/pks-LOVING/junior-dynamic-programming-dong-tai-gui-hua-chu-bu-ge-zhong-zi-xu-lie)\n\n2. “按顺序递推”和“记忆化搜索”是实现DP的两种方式。请查阅资料，简单描述“记忆化搜索”是什么。并采用记忆化搜索写出钞票问题的代码，然后完成[P1541 乌龟棋 - 洛谷](https://www.luogu.com.cn/problem/P1541) 。\n3. 01背包问题是一种常见的DP模型。请完成[P1048 采药 - 洛谷](https://www.luogu.com.cn/problem/P1048)。\n\n## 7. 读后思考：动态规划和分治法的区别与共同点？\n\n### 1. 分治法\n\n分治法(Divide-and-Conquer) : 将原问题划分成n个规模较小而结构与原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。\n\n分治模式在每一层递归上都有三个步骤：\n\n- 分解(Divide)：将原问题分解成一系列子问题；\n- 解决(Conquer)：递归地解决各个子问题。若子问题足够小，则直接求解。\n- 合并(Combine)：将子问题的结果合并成原问题的解。\n\n合并排序(Merge Sort)是一个典型分治法的例子。其对应的直观的操作如下:\n\n分解： 将n个元素分成各含n/2个元素的子序列；\n\n解决：用合并排序法对两个子序列递归地排序；\n\n合并：合并两个已排序的子序列以得到排序结果。\n\n### 2. 动态规划法\n\n动态规划算法的设计可以分为如下4个步骤：\n\n- 描述最优解的结构\n- 递归定义最优解的值\n- 按自底向上的方式计算最优解的值\n- 由计算出的结果构造一个最优解\n\n**分治法是指将问题划分成一些独立的子问题，递归的求解各子问题，然后合并子问题的解而得到原问题的解。与此不同，动态规划适用于子问题独立且重叠的情况，也就是各子问题包含公共的子子问题。在这种情况下，若用分治法则会做许多不必要的工作，即重复地求解公共的子问题。动态规划算法对每个子子问题只求解一次，将其结果保存在一张表中，从而避免每次遇到各个子问题时重新计算答案。**\n\n适合采用动态规划方法的最优化问题中的两个要素：**最优子结构**和**重叠子问题**。\n\n最优子结构：如果问题的一个最优解中包含了子问题的最优解，则该问题具有最优子结构。\n\n重叠子问题：适用于动态规划求解的最优化问题必须具有的第二个要素是子问题的空间要很小，也就是用来求解原问题的递归算法反复地解同样的子问题，而不是总是在产生新的子问题。对两个子问题来说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，则它们是重叠的。\n\nIn a word, **分治法 —— 各子问题独立；动态规划 —— 各子问题重叠**。\n\n算法导论： **动态规划要求其子问题既要独立又要重叠，这看上去似乎有些奇怪。虽然这两点要求听起来可能矛盾的，但它们描述了两种不同的概念，而不是同一个问题的两个方面。如果同一个问题的两个子问题不共享资源，则它们就是独立的。对两个子问题俩说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，是重叠的，则它们是重叠**。","source":"_posts/动态规划.md","raw":"---\ntitle: 动态规划\ncategories: 算法\ntags: 算法\n---\n\n本文大部分转载自知乎[@阮行止](https://www.zhihu.com/people/ruan-xing-zhi)，后添加了自己的一些思考。\n\n## 1. 从一个生活问题谈起\n先来看看生活中经常遇到的事吧——假设您是个土豪，身上带了足够的1、5、10、20、50、100元面值的钞票。现在您的目标是凑出某个金额w，**需要用到尽量少的钞票**。\n\n依据生活经验，我们显然可以采取这样的策略：能用100的就尽量用100的，否则尽量用50的……依次类推。在这种策略下，666=6×100+1×50+1×10+1×5+1×1，共使用了10张钞票。\n\n这种策略称为“**贪心**”：假设我们面对的局面是“需要凑出w”，贪心策略会**尽快**让w变得更小。能让w少100就尽量让它少100，这样我们接下来面对的局面就是凑出w-100。长期的生活经验表明，贪心策略是正确的。\n\n但是，如果我们换一组钞票的面值，贪心策略就也许不成立了。如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候，贪心策略会出错：  \n　　15=1×11+4×1 （贪心策略使用了5张钞票）  \n　　15=3×5 （正确的策略，只用3张钞票）  \n　　为什么会这样呢？贪心策略错在了哪里？  \n\n**鼠目寸光**。\n\n刚刚已经说过，贪心策略的纲领是：“尽量使接下来面对的w更小”。这样，贪心策略在w=15的局面时，会优先使用11来把w降到4；但是在这个问题中，凑出4的代价是很高的，必须使用4×1。如果使用了5，w会降为10，虽然没有4那么小，但是凑出10只需要两张5元。 \n\n在这里我们发现，贪心是一种**只考虑眼前情况**的策略。\n\n那么，现在我们怎样才能避免鼠目寸光呢？\n\n如果直接暴力枚举凑出w的方案，明显复杂度过高。太多种方法可以凑出w了，枚举它们的时间是不可承受的。我们现在来尝试找一下性质。\n\n重新分析刚刚的例子。w=15时，我们如果取11，接下来就面对w=4的情况；如果取5，则接下来面对w=10的情况。我们发现这些问题都有相同的形式：“给定w，凑出w所用的最少钞票是多少张？”接下来，我们用f(n)来表示“凑出n所需的最少钞票数量”。\n\n那么，如果我们取了11，最后的代价（用掉的钞票总数）是多少呢？  \n\n明显**cost=f(4)+1=4+1=5** ，它的意义是：利用11来凑出15，付出的代价等于f(4)加上自己这一张钞票。现在我们暂时不管f(4)怎么求出来。  \n\n依次类推，马上可以知道：如果我们用5来凑出15，cost就是**f(10)+1=2+1=3** 。\n\n那么，现在w=15的时候，我们该取那种钞票呢？**当然是各种方案中，cost值最低的那一个！**\n\n- 取11：cost=f(4)+1=4+1=5\n- 取5:cost=f(10)+1=2+1=3\n- 取1:cost=f(14)+1=4+1=5\n\n显而易见，cost值最低的是取5的方案。**我们通过上面三个式子，做出了正确的决策！**\n\n这给了我们一个**至关重要**的启示—— f(n)只与f(n-1),f(n-5),f(n-11) 相关；更确切地说：\n\n> f(n)=min{f(n-1),f(n-5),f(n-11)}+1\n\n这个式子是非常激动人心的。我们要求出f(n)，只需要求出几个更小的f值；既然如此，我们从小到大把所有的f(i)求出来不就好了？注意一下边界情况即可。代码如下：\n\n![pic1](img/动态规划/解决方案.jpg)\n\n我们以O(n)的复杂度解决了这个问题。现在回过头来，我们看看它的原理：\n\n- f(n)只与f(n-1),f(n-5),f(n-11)的值有关。\n- 我们只关心f(w)的值，不关心是怎么凑出w的。\n\n这两个事实，保证了我们做法的正确性。它比起贪心策略，会分别算出取1、5、11的代价，从而做出一个正确决策，这样就避免掉了“鼠目寸光”！\n\n它与暴力的区别在哪里？我们的暴力枚举了“使用的硬币”，然而这属于冗余信息。我们要的是答案，根本不关心这个答案是怎么凑出来的。譬如，要求出f(15)，只需要知道f(14),f(10),f(4)的值。**其他信息并不需要**。我们舍弃了冗余信息。我们只记录了对解决问题有帮助的信息——f(n).\n\n我们能这样干，取决于问题的性质：求出f(n)，只需要知道几个更小的f(c)。**我们将求解f(c)称作求解f(n)的“子问题”**。\n\n**这就是DP（动态规划，dynamic programming）**.\n\n**将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解。**\n\n## 2. 几个简单的概念\n- **无后效性**  \n    一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。  \n\n要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。\n\n“**未来与过去无关**”，这就是**无后效性**。\n\n（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）\n\n- 最优子结构\n\n回顾我们对f(n)的定义：我们记“凑出n所需的最少钞票数量”为f(n).\n\nf(n)的定义就已经蕴含了“最优”。利用w=14,10,4的最优解，我们即可算出w=15的最优解。\n\n大问题的**最优解**可以由小问题的**最优解**推出，这个性质叫做“最优子结构性质”。\n\n引入这两个概念之后，我们如何判断一个问题能否使用DP解决呢？\n\n**能将大问题拆成几个小问题，且满足无后效性、最优子结构性质**。\n\n## 3. DP的典型应用：DAG最短路\n\n问题很简单：给定一个城市的地图，所有的道路都是单行道，而且不会构成环。每条道路都有过路费，问您从S点到T点花费的最少费用。\n\n![最短路径](img/动态规划/最短路径.png)\n\n这个问题能用DP解决吗？我们先试着记从S到P的最少费用为f(P).\n\n想要到T，要么经过C，要么经过D。从而$f(T)=min\\{f(C)+20,f(D)+10\\}$.\n\n好像看起来可以DP。现在我们检验刚刚那两个性质：\n\n- 无后效性：对于点P，一旦f(P)确定，以后就只关心f(P)的值，不关心怎么去的。\n- 最优子结构：对于P，我们当然只关心到P的最小费用，即f(P)。如果我们从S走到T是$S \\rightarrow P\\rightarrow Q \\rightarrow T$,那肯定S走到Q的最优路径是$S \\rightarrow P\\rightarrow Q$。对一条最优的路径而言，从S走到**沿途上所有的点（子问题）**的最优路径，都是这条大路的一部分。这个问题的最优子结构性质是显然的。\n\n既然这两个性质都满足，那么本题可以DP。式子明显为：\n\n> f(P)=min\\{f(R)+W<sub>$R \\rightarrow P$</sub>\\}\n\n其中R为有路通到P的所有的点， [公式] 为R到P的过路费。\n\n代码实现也很简单，拓扑排序即可。\n\n## 4. 对DP原理的一点讨论\n\n- DP的核心思想\n\nDP为什么会快？\n\n无论是DP还是暴力，我们的算法都是在**可能解空间**内，寻找**最优解**。\n\n来看钞票问题。暴力做法是枚举所有的可能解，这是最大的可能解空间。\n\nDP是枚举**有希望成为答案的解**。这个空间比暴力的小得多。\n\n也就是说：**DP自带剪枝**。\n\nDP舍弃了一大堆不可能成为最优解的答案。譬如：  \n　　15 = 5+5+5 被考虑了。  \n　　15 = 5+5+1+1+1+1+1 从来没有考虑过，因为这不可能成为最优解。\n\n在暴力算法中，可能解空间往往是指数级的大小；如果我们采用DP，那么有可能把解空间的大小降到多项式级。\n\n一般来说，解空间越小，寻找解就越快。这样就完成了优化。\n\n- DP的操作过程\n\n一言以蔽之：**大事化小，小事化了**。\n\n将一个大问题转化成几个小问题；  \n　　求解小问题；  \n　　推出大问题的解。\n\n- 如何设计DP算法\n\n下面介绍比较通用的设计DP算法的步骤。\n\n首先，把我们面对的局面表示为x。这一步称为设计状态。\n\n对于状态x，记我们要求出的答案(e.g. 最小费用)为f(x).我们的目标是求出f(T).\n**找出f(x)与哪些局面有关（记为p）**，写出一个式子（称为状态转移方程），通过f(p)来推出f(x).\n\n- DP三连\n\n设计DP算法，往往可以遵循DP三连：\n\n我是谁？ ——设计状态，表示局面\n\n我从哪里来？\n\n我要到哪里去？ ——设计转移\n\n设计状态是DP的基础。接下来的设计转移，有两种方式：一种是考虑我从哪里来（本文之前提到的两个例子，都是在考虑“我从哪里来”）；另一种是考虑我到哪里去，这常见于求出f(x)之后，**更新能从x走到的一些解**。这种DP也是不少的，我们以后会遇到。\n\n总而言之，“我从哪里来”和“我要到哪里去”只需要考虑清楚其中一个，就能设计出状态转移方程，从而写代码求解问题。前者又称pull型的转移，后者又称push型的转移。\n\n> 思考题：如何把钞票问题的代码改写成“我到哪里去”的形式？  \n> 提示：求出f(x)之后，更新f(x+1),f(x+5),f(x+11).\n\n## 5. 例题：最长上升子序列\n\n扯了这么多形而上的内容，还是做一道例题吧。\n\n最长上升子序列（LIS）问题：给定长度为n的序列a，从a中抽取出一个子序列，这个子序列需要单调递增。问最长的上升子序列（LIS）的长度。  \n　　e.g. 1,5,3,4,6,9,7,8的LIS为1,3,4,6,7,8，长度为6。\n\n如何设计状态（我是谁）？\n\n我们记$f(x)$为以a<sub>x</sub>结尾的LIS长度，那么答案就是 $max\\{f(x)\\}$\n\n状态x从哪里推过来（我从哪里来）？\n\n考虑比x小的每一个p：如果 a<sub>x</sub> > a<sub>p</sub>，那么$f(x)$可以取$f(p)+1$.\n\n解释：我们把 a<sub>x</sub> 接在 a<sub>p</sub> 的后面，肯定能构造一个以 a<sub>x</sub> 结尾的上升子序列，长度比以 a<sub>p</sub> 结尾的LIS大1.那么，我们可以写出状态转移方程了：\n\n![状态转移方程](img/动态规划/状态转移方程.svg)\n\n至此解决问题。两层for循环，复杂度O(n<sup>2</sup>) 。\n\n![最长上升子序列代码](img/动态规划/最长上升子序列代码.jpg)\n\n从这三个例题中可以看出，DP是一种思想，一种“大事化小，小事化了”的思想。带着这种思想，DP将会成为我们解决问题的利器。\n\n## 6. 习题\n\n如果读者有兴趣，可以试着完成下面几个习题：\n\n1. 请采取一些优化手段，以 O(n log<sub>2</sub> n) 的复杂度解决LIS问题。\n\n提示：可以参考这篇博客 [Junior Dynamic Programming--动态规划初步·各种子序列问题](https://www.luogu.com.cn/blog/pks-LOVING/junior-dynamic-programming-dong-tai-gui-hua-chu-bu-ge-zhong-zi-xu-lie)\n\n2. “按顺序递推”和“记忆化搜索”是实现DP的两种方式。请查阅资料，简单描述“记忆化搜索”是什么。并采用记忆化搜索写出钞票问题的代码，然后完成[P1541 乌龟棋 - 洛谷](https://www.luogu.com.cn/problem/P1541) 。\n3. 01背包问题是一种常见的DP模型。请完成[P1048 采药 - 洛谷](https://www.luogu.com.cn/problem/P1048)。\n\n## 7. 读后思考：动态规划和分治法的区别与共同点？\n\n### 1. 分治法\n\n分治法(Divide-and-Conquer) : 将原问题划分成n个规模较小而结构与原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。\n\n分治模式在每一层递归上都有三个步骤：\n\n- 分解(Divide)：将原问题分解成一系列子问题；\n- 解决(Conquer)：递归地解决各个子问题。若子问题足够小，则直接求解。\n- 合并(Combine)：将子问题的结果合并成原问题的解。\n\n合并排序(Merge Sort)是一个典型分治法的例子。其对应的直观的操作如下:\n\n分解： 将n个元素分成各含n/2个元素的子序列；\n\n解决：用合并排序法对两个子序列递归地排序；\n\n合并：合并两个已排序的子序列以得到排序结果。\n\n### 2. 动态规划法\n\n动态规划算法的设计可以分为如下4个步骤：\n\n- 描述最优解的结构\n- 递归定义最优解的值\n- 按自底向上的方式计算最优解的值\n- 由计算出的结果构造一个最优解\n\n**分治法是指将问题划分成一些独立的子问题，递归的求解各子问题，然后合并子问题的解而得到原问题的解。与此不同，动态规划适用于子问题独立且重叠的情况，也就是各子问题包含公共的子子问题。在这种情况下，若用分治法则会做许多不必要的工作，即重复地求解公共的子问题。动态规划算法对每个子子问题只求解一次，将其结果保存在一张表中，从而避免每次遇到各个子问题时重新计算答案。**\n\n适合采用动态规划方法的最优化问题中的两个要素：**最优子结构**和**重叠子问题**。\n\n最优子结构：如果问题的一个最优解中包含了子问题的最优解，则该问题具有最优子结构。\n\n重叠子问题：适用于动态规划求解的最优化问题必须具有的第二个要素是子问题的空间要很小，也就是用来求解原问题的递归算法反复地解同样的子问题，而不是总是在产生新的子问题。对两个子问题来说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，则它们是重叠的。\n\nIn a word, **分治法 —— 各子问题独立；动态规划 —— 各子问题重叠**。\n\n算法导论： **动态规划要求其子问题既要独立又要重叠，这看上去似乎有些奇怪。虽然这两点要求听起来可能矛盾的，但它们描述了两种不同的概念，而不是同一个问题的两个方面。如果同一个问题的两个子问题不共享资源，则它们就是独立的。对两个子问题俩说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，是重叠的，则它们是重叠**。","slug":"动态规划","published":1,"date":"2022-12-02T04:31:12.142Z","updated":"2022-12-02T04:51:31.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61a8pj0004lssgc4xd7g84","content":"<p>本文大部分转载自知乎<a href=\"https://www.zhihu.com/people/ruan-xing-zhi\">@阮行止</a>，后添加了自己的一些思考。</p>\n<h2 id=\"1-从一个生活问题谈起\"><a href=\"#1-从一个生活问题谈起\" class=\"headerlink\" title=\"1. 从一个生活问题谈起\"></a>1. 从一个生活问题谈起</h2><p>先来看看生活中经常遇到的事吧——假设您是个土豪，身上带了足够的1、5、10、20、50、100元面值的钞票。现在您的目标是凑出某个金额w，<strong>需要用到尽量少的钞票</strong>。</p>\n<p>依据生活经验，我们显然可以采取这样的策略：能用100的就尽量用100的，否则尽量用50的……依次类推。在这种策略下，666&#x3D;6×100+1×50+1×10+1×5+1×1，共使用了10张钞票。</p>\n<p>这种策略称为“<strong>贪心</strong>”：假设我们面对的局面是“需要凑出w”，贪心策略会<strong>尽快</strong>让w变得更小。能让w少100就尽量让它少100，这样我们接下来面对的局面就是凑出w-100。长期的生活经验表明，贪心策略是正确的。</p>\n<p>但是，如果我们换一组钞票的面值，贪心策略就也许不成立了。如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候，贪心策略会出错：<br>　　15&#x3D;1×11+4×1 （贪心策略使用了5张钞票）<br>　　15&#x3D;3×5 （正确的策略，只用3张钞票）<br>　　为什么会这样呢？贪心策略错在了哪里？  </p>\n<p><strong>鼠目寸光</strong>。</p>\n<p>刚刚已经说过，贪心策略的纲领是：“尽量使接下来面对的w更小”。这样，贪心策略在w&#x3D;15的局面时，会优先使用11来把w降到4；但是在这个问题中，凑出4的代价是很高的，必须使用4×1。如果使用了5，w会降为10，虽然没有4那么小，但是凑出10只需要两张5元。 </p>\n<p>在这里我们发现，贪心是一种<strong>只考虑眼前情况</strong>的策略。</p>\n<p>那么，现在我们怎样才能避免鼠目寸光呢？</p>\n<p>如果直接暴力枚举凑出w的方案，明显复杂度过高。太多种方法可以凑出w了，枚举它们的时间是不可承受的。我们现在来尝试找一下性质。</p>\n<p>重新分析刚刚的例子。w&#x3D;15时，我们如果取11，接下来就面对w&#x3D;4的情况；如果取5，则接下来面对w&#x3D;10的情况。我们发现这些问题都有相同的形式：“给定w，凑出w所用的最少钞票是多少张？”接下来，我们用f(n)来表示“凑出n所需的最少钞票数量”。</p>\n<p>那么，如果我们取了11，最后的代价（用掉的钞票总数）是多少呢？  </p>\n<p>明显<strong>cost&#x3D;f(4)+1&#x3D;4+1&#x3D;5</strong> ，它的意义是：利用11来凑出15，付出的代价等于f(4)加上自己这一张钞票。现在我们暂时不管f(4)怎么求出来。  </p>\n<p>依次类推，马上可以知道：如果我们用5来凑出15，cost就是<strong>f(10)+1&#x3D;2+1&#x3D;3</strong> 。</p>\n<p>那么，现在w&#x3D;15的时候，我们该取那种钞票呢？<strong>当然是各种方案中，cost值最低的那一个！</strong></p>\n<ul>\n<li>取11：cost&#x3D;f(4)+1&#x3D;4+1&#x3D;5</li>\n<li>取5:cost&#x3D;f(10)+1&#x3D;2+1&#x3D;3</li>\n<li>取1:cost&#x3D;f(14)+1&#x3D;4+1&#x3D;5</li>\n</ul>\n<p>显而易见，cost值最低的是取5的方案。<strong>我们通过上面三个式子，做出了正确的决策！</strong></p>\n<p>这给了我们一个<strong>至关重要</strong>的启示—— f(n)只与f(n-1),f(n-5),f(n-11) 相关；更确切地说：</p>\n<blockquote>\n<p>f(n)&#x3D;min{f(n-1),f(n-5),f(n-11)}+1</p>\n</blockquote>\n<p>这个式子是非常激动人心的。我们要求出f(n)，只需要求出几个更小的f值；既然如此，我们从小到大把所有的f(i)求出来不就好了？注意一下边界情况即可。代码如下：</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.jpg\" alt=\"pic1\"></p>\n<p>我们以O(n)的复杂度解决了这个问题。现在回过头来，我们看看它的原理：</p>\n<ul>\n<li>f(n)只与f(n-1),f(n-5),f(n-11)的值有关。</li>\n<li>我们只关心f(w)的值，不关心是怎么凑出w的。</li>\n</ul>\n<p>这两个事实，保证了我们做法的正确性。它比起贪心策略，会分别算出取1、5、11的代价，从而做出一个正确决策，这样就避免掉了“鼠目寸光”！</p>\n<p>它与暴力的区别在哪里？我们的暴力枚举了“使用的硬币”，然而这属于冗余信息。我们要的是答案，根本不关心这个答案是怎么凑出来的。譬如，要求出f(15)，只需要知道f(14),f(10),f(4)的值。<strong>其他信息并不需要</strong>。我们舍弃了冗余信息。我们只记录了对解决问题有帮助的信息——f(n).</p>\n<p>我们能这样干，取决于问题的性质：求出f(n)，只需要知道几个更小的f(c)。<strong>我们将求解f(c)称作求解f(n)的“子问题”</strong>。</p>\n<p><strong>这就是DP（动态规划，dynamic programming）</strong>.</p>\n<p><strong>将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解。</strong></p>\n<h2 id=\"2-几个简单的概念\"><a href=\"#2-几个简单的概念\" class=\"headerlink\" title=\"2. 几个简单的概念\"></a>2. 几个简单的概念</h2><ul>\n<li><strong>无后效性</strong><br>  一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。</li>\n</ul>\n<p>要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。</p>\n<p>“<strong>未来与过去无关</strong>”，这就是<strong>无后效性</strong>。</p>\n<p>（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）</p>\n<ul>\n<li>最优子结构</li>\n</ul>\n<p>回顾我们对f(n)的定义：我们记“凑出n所需的最少钞票数量”为f(n).</p>\n<p>f(n)的定义就已经蕴含了“最优”。利用w&#x3D;14,10,4的最优解，我们即可算出w&#x3D;15的最优解。</p>\n<p>大问题的<strong>最优解</strong>可以由小问题的<strong>最优解</strong>推出，这个性质叫做“最优子结构性质”。</p>\n<p>引入这两个概念之后，我们如何判断一个问题能否使用DP解决呢？</p>\n<p><strong>能将大问题拆成几个小问题，且满足无后效性、最优子结构性质</strong>。</p>\n<h2 id=\"3-DP的典型应用：DAG最短路\"><a href=\"#3-DP的典型应用：DAG最短路\" class=\"headerlink\" title=\"3. DP的典型应用：DAG最短路\"></a>3. DP的典型应用：DAG最短路</h2><p>问题很简单：给定一个城市的地图，所有的道路都是单行道，而且不会构成环。每条道路都有过路费，问您从S点到T点花费的最少费用。</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.png\" alt=\"最短路径\"></p>\n<p>这个问题能用DP解决吗？我们先试着记从S到P的最少费用为f(P).</p>\n<p>想要到T，要么经过C，要么经过D。从而$f(T)&#x3D;min{f(C)+20,f(D)+10}$.</p>\n<p>好像看起来可以DP。现在我们检验刚刚那两个性质：</p>\n<ul>\n<li>无后效性：对于点P，一旦f(P)确定，以后就只关心f(P)的值，不关心怎么去的。</li>\n<li>最优子结构：对于P，我们当然只关心到P的最小费用，即f(P)。如果我们从S走到T是$S \\rightarrow P\\rightarrow Q \\rightarrow T$,那肯定S走到Q的最优路径是$S \\rightarrow P\\rightarrow Q$。对一条最优的路径而言，从S走到<strong>沿途上所有的点（子问题）</strong>的最优路径，都是这条大路的一部分。这个问题的最优子结构性质是显然的。</li>\n</ul>\n<p>既然这两个性质都满足，那么本题可以DP。式子明显为：</p>\n<blockquote>\n<p>f(P)&#x3D;min{f(R)+W<sub>$R \\rightarrow P$</sub>}</p>\n</blockquote>\n<p>其中R为有路通到P的所有的点， [公式] 为R到P的过路费。</p>\n<p>代码实现也很简单，拓扑排序即可。</p>\n<h2 id=\"4-对DP原理的一点讨论\"><a href=\"#4-对DP原理的一点讨论\" class=\"headerlink\" title=\"4. 对DP原理的一点讨论\"></a>4. 对DP原理的一点讨论</h2><ul>\n<li>DP的核心思想</li>\n</ul>\n<p>DP为什么会快？</p>\n<p>无论是DP还是暴力，我们的算法都是在<strong>可能解空间</strong>内，寻找<strong>最优解</strong>。</p>\n<p>来看钞票问题。暴力做法是枚举所有的可能解，这是最大的可能解空间。</p>\n<p>DP是枚举<strong>有希望成为答案的解</strong>。这个空间比暴力的小得多。</p>\n<p>也就是说：<strong>DP自带剪枝</strong>。</p>\n<p>DP舍弃了一大堆不可能成为最优解的答案。譬如：<br>　　15 &#x3D; 5+5+5 被考虑了。<br>　　15 &#x3D; 5+5+1+1+1+1+1 从来没有考虑过，因为这不可能成为最优解。</p>\n<p>在暴力算法中，可能解空间往往是指数级的大小；如果我们采用DP，那么有可能把解空间的大小降到多项式级。</p>\n<p>一般来说，解空间越小，寻找解就越快。这样就完成了优化。</p>\n<ul>\n<li>DP的操作过程</li>\n</ul>\n<p>一言以蔽之：<strong>大事化小，小事化了</strong>。</p>\n<p>将一个大问题转化成几个小问题；<br>　　求解小问题；<br>　　推出大问题的解。</p>\n<ul>\n<li>如何设计DP算法</li>\n</ul>\n<p>下面介绍比较通用的设计DP算法的步骤。</p>\n<p>首先，把我们面对的局面表示为x。这一步称为设计状态。</p>\n<p>对于状态x，记我们要求出的答案(e.g. 最小费用)为f(x).我们的目标是求出f(T).<br><strong>找出f(x)与哪些局面有关（记为p）</strong>，写出一个式子（称为状态转移方程），通过f(p)来推出f(x).</p>\n<ul>\n<li>DP三连</li>\n</ul>\n<p>设计DP算法，往往可以遵循DP三连：</p>\n<p>我是谁？ ——设计状态，表示局面</p>\n<p>我从哪里来？</p>\n<p>我要到哪里去？ ——设计转移</p>\n<p>设计状态是DP的基础。接下来的设计转移，有两种方式：一种是考虑我从哪里来（本文之前提到的两个例子，都是在考虑“我从哪里来”）；另一种是考虑我到哪里去，这常见于求出f(x)之后，<strong>更新能从x走到的一些解</strong>。这种DP也是不少的，我们以后会遇到。</p>\n<p>总而言之，“我从哪里来”和“我要到哪里去”只需要考虑清楚其中一个，就能设计出状态转移方程，从而写代码求解问题。前者又称pull型的转移，后者又称push型的转移。</p>\n<blockquote>\n<p>思考题：如何把钞票问题的代码改写成“我到哪里去”的形式？<br>提示：求出f(x)之后，更新f(x+1),f(x+5),f(x+11).</p>\n</blockquote>\n<h2 id=\"5-例题：最长上升子序列\"><a href=\"#5-例题：最长上升子序列\" class=\"headerlink\" title=\"5. 例题：最长上升子序列\"></a>5. 例题：最长上升子序列</h2><p>扯了这么多形而上的内容，还是做一道例题吧。</p>\n<p>最长上升子序列（LIS）问题：给定长度为n的序列a，从a中抽取出一个子序列，这个子序列需要单调递增。问最长的上升子序列（LIS）的长度。<br>　　e.g. 1,5,3,4,6,9,7,8的LIS为1,3,4,6,7,8，长度为6。</p>\n<p>如何设计状态（我是谁）？</p>\n<p>我们记$f(x)$为以a<sub>x</sub>结尾的LIS长度，那么答案就是 $max{f(x)}$</p>\n<p>状态x从哪里推过来（我从哪里来）？</p>\n<p>考虑比x小的每一个p：如果 a<sub>x</sub> &gt; a<sub>p</sub>，那么$f(x)$可以取$f(p)+1$.</p>\n<p>解释：我们把 a<sub>x</sub> 接在 a<sub>p</sub> 的后面，肯定能构造一个以 a<sub>x</sub> 结尾的上升子序列，长度比以 a<sub>p</sub> 结尾的LIS大1.那么，我们可以写出状态转移方程了：</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E6%96%B9%E7%A8%8B.svg\" alt=\"状态转移方程\"></p>\n<p>至此解决问题。两层for循环，复杂度O(n<sup>2</sup>) 。</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E4%BB%A3%E7%A0%81.jpg\" alt=\"最长上升子序列代码\"></p>\n<p>从这三个例题中可以看出，DP是一种思想，一种“大事化小，小事化了”的思想。带着这种思想，DP将会成为我们解决问题的利器。</p>\n<h2 id=\"6-习题\"><a href=\"#6-习题\" class=\"headerlink\" title=\"6. 习题\"></a>6. 习题</h2><p>如果读者有兴趣，可以试着完成下面几个习题：</p>\n<ol>\n<li>请采取一些优化手段，以 O(n log<sub>2</sub> n) 的复杂度解决LIS问题。</li>\n</ol>\n<p>提示：可以参考这篇博客 <a href=\"https://www.luogu.com.cn/blog/pks-LOVING/junior-dynamic-programming-dong-tai-gui-hua-chu-bu-ge-zhong-zi-xu-lie\">Junior Dynamic Programming–动态规划初步·各种子序列问题</a></p>\n<ol start=\"2\">\n<li>“按顺序递推”和“记忆化搜索”是实现DP的两种方式。请查阅资料，简单描述“记忆化搜索”是什么。并采用记忆化搜索写出钞票问题的代码，然后完成<a href=\"https://www.luogu.com.cn/problem/P1541\">P1541 乌龟棋 - 洛谷</a> 。</li>\n<li>01背包问题是一种常见的DP模型。请完成<a href=\"https://www.luogu.com.cn/problem/P1048\">P1048 采药 - 洛谷</a>。</li>\n</ol>\n<h2 id=\"7-读后思考：动态规划和分治法的区别与共同点？\"><a href=\"#7-读后思考：动态规划和分治法的区别与共同点？\" class=\"headerlink\" title=\"7. 读后思考：动态规划和分治法的区别与共同点？\"></a>7. 读后思考：动态规划和分治法的区别与共同点？</h2><h3 id=\"1-分治法\"><a href=\"#1-分治法\" class=\"headerlink\" title=\"1. 分治法\"></a>1. 分治法</h3><p>分治法(Divide-and-Conquer) : 将原问题划分成n个规模较小而结构与原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。</p>\n<p>分治模式在每一层递归上都有三个步骤：</p>\n<ul>\n<li>分解(Divide)：将原问题分解成一系列子问题；</li>\n<li>解决(Conquer)：递归地解决各个子问题。若子问题足够小，则直接求解。</li>\n<li>合并(Combine)：将子问题的结果合并成原问题的解。</li>\n</ul>\n<p>合并排序(Merge Sort)是一个典型分治法的例子。其对应的直观的操作如下:</p>\n<p>分解： 将n个元素分成各含n&#x2F;2个元素的子序列；</p>\n<p>解决：用合并排序法对两个子序列递归地排序；</p>\n<p>合并：合并两个已排序的子序列以得到排序结果。</p>\n<h3 id=\"2-动态规划法\"><a href=\"#2-动态规划法\" class=\"headerlink\" title=\"2. 动态规划法\"></a>2. 动态规划法</h3><p>动态规划算法的设计可以分为如下4个步骤：</p>\n<ul>\n<li>描述最优解的结构</li>\n<li>递归定义最优解的值</li>\n<li>按自底向上的方式计算最优解的值</li>\n<li>由计算出的结果构造一个最优解</li>\n</ul>\n<p><strong>分治法是指将问题划分成一些独立的子问题，递归的求解各子问题，然后合并子问题的解而得到原问题的解。与此不同，动态规划适用于子问题独立且重叠的情况，也就是各子问题包含公共的子子问题。在这种情况下，若用分治法则会做许多不必要的工作，即重复地求解公共的子问题。动态规划算法对每个子子问题只求解一次，将其结果保存在一张表中，从而避免每次遇到各个子问题时重新计算答案。</strong></p>\n<p>适合采用动态规划方法的最优化问题中的两个要素：<strong>最优子结构</strong>和<strong>重叠子问题</strong>。</p>\n<p>最优子结构：如果问题的一个最优解中包含了子问题的最优解，则该问题具有最优子结构。</p>\n<p>重叠子问题：适用于动态规划求解的最优化问题必须具有的第二个要素是子问题的空间要很小，也就是用来求解原问题的递归算法反复地解同样的子问题，而不是总是在产生新的子问题。对两个子问题来说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，则它们是重叠的。</p>\n<p>In a word, <strong>分治法 —— 各子问题独立；动态规划 —— 各子问题重叠</strong>。</p>\n<p>算法导论： <strong>动态规划要求其子问题既要独立又要重叠，这看上去似乎有些奇怪。虽然这两点要求听起来可能矛盾的，但它们描述了两种不同的概念，而不是同一个问题的两个方面。如果同一个问题的两个子问题不共享资源，则它们就是独立的。对两个子问题俩说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，是重叠的，则它们是重叠</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文大部分转载自知乎<a href=\"https://www.zhihu.com/people/ruan-xing-zhi\">@阮行止</a>，后添加了自己的一些思考。</p>\n<h2 id=\"1-从一个生活问题谈起\"><a href=\"#1-从一个生活问题谈起\" class=\"headerlink\" title=\"1. 从一个生活问题谈起\"></a>1. 从一个生活问题谈起</h2><p>先来看看生活中经常遇到的事吧——假设您是个土豪，身上带了足够的1、5、10、20、50、100元面值的钞票。现在您的目标是凑出某个金额w，<strong>需要用到尽量少的钞票</strong>。</p>\n<p>依据生活经验，我们显然可以采取这样的策略：能用100的就尽量用100的，否则尽量用50的……依次类推。在这种策略下，666&#x3D;6×100+1×50+1×10+1×5+1×1，共使用了10张钞票。</p>\n<p>这种策略称为“<strong>贪心</strong>”：假设我们面对的局面是“需要凑出w”，贪心策略会<strong>尽快</strong>让w变得更小。能让w少100就尽量让它少100，这样我们接下来面对的局面就是凑出w-100。长期的生活经验表明，贪心策略是正确的。</p>\n<p>但是，如果我们换一组钞票的面值，贪心策略就也许不成立了。如果一个奇葩国家的钞票面额分别是1、5、11，那么我们在凑出15的时候，贪心策略会出错：<br>　　15&#x3D;1×11+4×1 （贪心策略使用了5张钞票）<br>　　15&#x3D;3×5 （正确的策略，只用3张钞票）<br>　　为什么会这样呢？贪心策略错在了哪里？  </p>\n<p><strong>鼠目寸光</strong>。</p>\n<p>刚刚已经说过，贪心策略的纲领是：“尽量使接下来面对的w更小”。这样，贪心策略在w&#x3D;15的局面时，会优先使用11来把w降到4；但是在这个问题中，凑出4的代价是很高的，必须使用4×1。如果使用了5，w会降为10，虽然没有4那么小，但是凑出10只需要两张5元。 </p>\n<p>在这里我们发现，贪心是一种<strong>只考虑眼前情况</strong>的策略。</p>\n<p>那么，现在我们怎样才能避免鼠目寸光呢？</p>\n<p>如果直接暴力枚举凑出w的方案，明显复杂度过高。太多种方法可以凑出w了，枚举它们的时间是不可承受的。我们现在来尝试找一下性质。</p>\n<p>重新分析刚刚的例子。w&#x3D;15时，我们如果取11，接下来就面对w&#x3D;4的情况；如果取5，则接下来面对w&#x3D;10的情况。我们发现这些问题都有相同的形式：“给定w，凑出w所用的最少钞票是多少张？”接下来，我们用f(n)来表示“凑出n所需的最少钞票数量”。</p>\n<p>那么，如果我们取了11，最后的代价（用掉的钞票总数）是多少呢？  </p>\n<p>明显<strong>cost&#x3D;f(4)+1&#x3D;4+1&#x3D;5</strong> ，它的意义是：利用11来凑出15，付出的代价等于f(4)加上自己这一张钞票。现在我们暂时不管f(4)怎么求出来。  </p>\n<p>依次类推，马上可以知道：如果我们用5来凑出15，cost就是<strong>f(10)+1&#x3D;2+1&#x3D;3</strong> 。</p>\n<p>那么，现在w&#x3D;15的时候，我们该取那种钞票呢？<strong>当然是各种方案中，cost值最低的那一个！</strong></p>\n<ul>\n<li>取11：cost&#x3D;f(4)+1&#x3D;4+1&#x3D;5</li>\n<li>取5:cost&#x3D;f(10)+1&#x3D;2+1&#x3D;3</li>\n<li>取1:cost&#x3D;f(14)+1&#x3D;4+1&#x3D;5</li>\n</ul>\n<p>显而易见，cost值最低的是取5的方案。<strong>我们通过上面三个式子，做出了正确的决策！</strong></p>\n<p>这给了我们一个<strong>至关重要</strong>的启示—— f(n)只与f(n-1),f(n-5),f(n-11) 相关；更确切地说：</p>\n<blockquote>\n<p>f(n)&#x3D;min{f(n-1),f(n-5),f(n-11)}+1</p>\n</blockquote>\n<p>这个式子是非常激动人心的。我们要求出f(n)，只需要求出几个更小的f值；既然如此，我们从小到大把所有的f(i)求出来不就好了？注意一下边界情况即可。代码如下：</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.jpg\" alt=\"pic1\"></p>\n<p>我们以O(n)的复杂度解决了这个问题。现在回过头来，我们看看它的原理：</p>\n<ul>\n<li>f(n)只与f(n-1),f(n-5),f(n-11)的值有关。</li>\n<li>我们只关心f(w)的值，不关心是怎么凑出w的。</li>\n</ul>\n<p>这两个事实，保证了我们做法的正确性。它比起贪心策略，会分别算出取1、5、11的代价，从而做出一个正确决策，这样就避免掉了“鼠目寸光”！</p>\n<p>它与暴力的区别在哪里？我们的暴力枚举了“使用的硬币”，然而这属于冗余信息。我们要的是答案，根本不关心这个答案是怎么凑出来的。譬如，要求出f(15)，只需要知道f(14),f(10),f(4)的值。<strong>其他信息并不需要</strong>。我们舍弃了冗余信息。我们只记录了对解决问题有帮助的信息——f(n).</p>\n<p>我们能这样干，取决于问题的性质：求出f(n)，只需要知道几个更小的f(c)。<strong>我们将求解f(c)称作求解f(n)的“子问题”</strong>。</p>\n<p><strong>这就是DP（动态规划，dynamic programming）</strong>.</p>\n<p><strong>将一个问题拆成几个子问题，分别求解这些子问题，即可推断出大问题的解。</strong></p>\n<h2 id=\"2-几个简单的概念\"><a href=\"#2-几个简单的概念\" class=\"headerlink\" title=\"2. 几个简单的概念\"></a>2. 几个简单的概念</h2><ul>\n<li><strong>无后效性</strong><br>  一旦f(n)确定，“我们如何凑出f(n)”就再也用不着了。</li>\n</ul>\n<p>要求出f(15)，只需要知道f(14),f(10),f(4)的值，而f(14),f(10),f(4)是如何算出来的，对之后的问题没有影响。</p>\n<p>“<strong>未来与过去无关</strong>”，这就是<strong>无后效性</strong>。</p>\n<p>（严格定义：如果给定某一阶段的状态，则在这一阶段以后过程的发展不受这阶段以前各段状态的影响。）</p>\n<ul>\n<li>最优子结构</li>\n</ul>\n<p>回顾我们对f(n)的定义：我们记“凑出n所需的最少钞票数量”为f(n).</p>\n<p>f(n)的定义就已经蕴含了“最优”。利用w&#x3D;14,10,4的最优解，我们即可算出w&#x3D;15的最优解。</p>\n<p>大问题的<strong>最优解</strong>可以由小问题的<strong>最优解</strong>推出，这个性质叫做“最优子结构性质”。</p>\n<p>引入这两个概念之后，我们如何判断一个问题能否使用DP解决呢？</p>\n<p><strong>能将大问题拆成几个小问题，且满足无后效性、最优子结构性质</strong>。</p>\n<h2 id=\"3-DP的典型应用：DAG最短路\"><a href=\"#3-DP的典型应用：DAG最短路\" class=\"headerlink\" title=\"3. DP的典型应用：DAG最短路\"></a>3. DP的典型应用：DAG最短路</h2><p>问题很简单：给定一个城市的地图，所有的道路都是单行道，而且不会构成环。每条道路都有过路费，问您从S点到T点花费的最少费用。</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84.png\" alt=\"最短路径\"></p>\n<p>这个问题能用DP解决吗？我们先试着记从S到P的最少费用为f(P).</p>\n<p>想要到T，要么经过C，要么经过D。从而$f(T)&#x3D;min{f(C)+20,f(D)+10}$.</p>\n<p>好像看起来可以DP。现在我们检验刚刚那两个性质：</p>\n<ul>\n<li>无后效性：对于点P，一旦f(P)确定，以后就只关心f(P)的值，不关心怎么去的。</li>\n<li>最优子结构：对于P，我们当然只关心到P的最小费用，即f(P)。如果我们从S走到T是$S \\rightarrow P\\rightarrow Q \\rightarrow T$,那肯定S走到Q的最优路径是$S \\rightarrow P\\rightarrow Q$。对一条最优的路径而言，从S走到<strong>沿途上所有的点（子问题）</strong>的最优路径，都是这条大路的一部分。这个问题的最优子结构性质是显然的。</li>\n</ul>\n<p>既然这两个性质都满足，那么本题可以DP。式子明显为：</p>\n<blockquote>\n<p>f(P)&#x3D;min{f(R)+W<sub>$R \\rightarrow P$</sub>}</p>\n</blockquote>\n<p>其中R为有路通到P的所有的点， [公式] 为R到P的过路费。</p>\n<p>代码实现也很简单，拓扑排序即可。</p>\n<h2 id=\"4-对DP原理的一点讨论\"><a href=\"#4-对DP原理的一点讨论\" class=\"headerlink\" title=\"4. 对DP原理的一点讨论\"></a>4. 对DP原理的一点讨论</h2><ul>\n<li>DP的核心思想</li>\n</ul>\n<p>DP为什么会快？</p>\n<p>无论是DP还是暴力，我们的算法都是在<strong>可能解空间</strong>内，寻找<strong>最优解</strong>。</p>\n<p>来看钞票问题。暴力做法是枚举所有的可能解，这是最大的可能解空间。</p>\n<p>DP是枚举<strong>有希望成为答案的解</strong>。这个空间比暴力的小得多。</p>\n<p>也就是说：<strong>DP自带剪枝</strong>。</p>\n<p>DP舍弃了一大堆不可能成为最优解的答案。譬如：<br>　　15 &#x3D; 5+5+5 被考虑了。<br>　　15 &#x3D; 5+5+1+1+1+1+1 从来没有考虑过，因为这不可能成为最优解。</p>\n<p>在暴力算法中，可能解空间往往是指数级的大小；如果我们采用DP，那么有可能把解空间的大小降到多项式级。</p>\n<p>一般来说，解空间越小，寻找解就越快。这样就完成了优化。</p>\n<ul>\n<li>DP的操作过程</li>\n</ul>\n<p>一言以蔽之：<strong>大事化小，小事化了</strong>。</p>\n<p>将一个大问题转化成几个小问题；<br>　　求解小问题；<br>　　推出大问题的解。</p>\n<ul>\n<li>如何设计DP算法</li>\n</ul>\n<p>下面介绍比较通用的设计DP算法的步骤。</p>\n<p>首先，把我们面对的局面表示为x。这一步称为设计状态。</p>\n<p>对于状态x，记我们要求出的答案(e.g. 最小费用)为f(x).我们的目标是求出f(T).<br><strong>找出f(x)与哪些局面有关（记为p）</strong>，写出一个式子（称为状态转移方程），通过f(p)来推出f(x).</p>\n<ul>\n<li>DP三连</li>\n</ul>\n<p>设计DP算法，往往可以遵循DP三连：</p>\n<p>我是谁？ ——设计状态，表示局面</p>\n<p>我从哪里来？</p>\n<p>我要到哪里去？ ——设计转移</p>\n<p>设计状态是DP的基础。接下来的设计转移，有两种方式：一种是考虑我从哪里来（本文之前提到的两个例子，都是在考虑“我从哪里来”）；另一种是考虑我到哪里去，这常见于求出f(x)之后，<strong>更新能从x走到的一些解</strong>。这种DP也是不少的，我们以后会遇到。</p>\n<p>总而言之，“我从哪里来”和“我要到哪里去”只需要考虑清楚其中一个，就能设计出状态转移方程，从而写代码求解问题。前者又称pull型的转移，后者又称push型的转移。</p>\n<blockquote>\n<p>思考题：如何把钞票问题的代码改写成“我到哪里去”的形式？<br>提示：求出f(x)之后，更新f(x+1),f(x+5),f(x+11).</p>\n</blockquote>\n<h2 id=\"5-例题：最长上升子序列\"><a href=\"#5-例题：最长上升子序列\" class=\"headerlink\" title=\"5. 例题：最长上升子序列\"></a>5. 例题：最长上升子序列</h2><p>扯了这么多形而上的内容，还是做一道例题吧。</p>\n<p>最长上升子序列（LIS）问题：给定长度为n的序列a，从a中抽取出一个子序列，这个子序列需要单调递增。问最长的上升子序列（LIS）的长度。<br>　　e.g. 1,5,3,4,6,9,7,8的LIS为1,3,4,6,7,8，长度为6。</p>\n<p>如何设计状态（我是谁）？</p>\n<p>我们记$f(x)$为以a<sub>x</sub>结尾的LIS长度，那么答案就是 $max{f(x)}$</p>\n<p>状态x从哪里推过来（我从哪里来）？</p>\n<p>考虑比x小的每一个p：如果 a<sub>x</sub> &gt; a<sub>p</sub>，那么$f(x)$可以取$f(p)+1$.</p>\n<p>解释：我们把 a<sub>x</sub> 接在 a<sub>p</sub> 的后面，肯定能构造一个以 a<sub>x</sub> 结尾的上升子序列，长度比以 a<sub>p</sub> 结尾的LIS大1.那么，我们可以写出状态转移方程了：</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB%E6%96%B9%E7%A8%8B.svg\" alt=\"状态转移方程\"></p>\n<p>至此解决问题。两层for循环，复杂度O(n<sup>2</sup>) 。</p>\n<p><img src=\"/img/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%E4%BB%A3%E7%A0%81.jpg\" alt=\"最长上升子序列代码\"></p>\n<p>从这三个例题中可以看出，DP是一种思想，一种“大事化小，小事化了”的思想。带着这种思想，DP将会成为我们解决问题的利器。</p>\n<h2 id=\"6-习题\"><a href=\"#6-习题\" class=\"headerlink\" title=\"6. 习题\"></a>6. 习题</h2><p>如果读者有兴趣，可以试着完成下面几个习题：</p>\n<ol>\n<li>请采取一些优化手段，以 O(n log<sub>2</sub> n) 的复杂度解决LIS问题。</li>\n</ol>\n<p>提示：可以参考这篇博客 <a href=\"https://www.luogu.com.cn/blog/pks-LOVING/junior-dynamic-programming-dong-tai-gui-hua-chu-bu-ge-zhong-zi-xu-lie\">Junior Dynamic Programming–动态规划初步·各种子序列问题</a></p>\n<ol start=\"2\">\n<li>“按顺序递推”和“记忆化搜索”是实现DP的两种方式。请查阅资料，简单描述“记忆化搜索”是什么。并采用记忆化搜索写出钞票问题的代码，然后完成<a href=\"https://www.luogu.com.cn/problem/P1541\">P1541 乌龟棋 - 洛谷</a> 。</li>\n<li>01背包问题是一种常见的DP模型。请完成<a href=\"https://www.luogu.com.cn/problem/P1048\">P1048 采药 - 洛谷</a>。</li>\n</ol>\n<h2 id=\"7-读后思考：动态规划和分治法的区别与共同点？\"><a href=\"#7-读后思考：动态规划和分治法的区别与共同点？\" class=\"headerlink\" title=\"7. 读后思考：动态规划和分治法的区别与共同点？\"></a>7. 读后思考：动态规划和分治法的区别与共同点？</h2><h3 id=\"1-分治法\"><a href=\"#1-分治法\" class=\"headerlink\" title=\"1. 分治法\"></a>1. 分治法</h3><p>分治法(Divide-and-Conquer) : 将原问题划分成n个规模较小而结构与原问题相似的子问题；递归地解决这些子问题，然后再合并其结果，就得到原问题的解。</p>\n<p>分治模式在每一层递归上都有三个步骤：</p>\n<ul>\n<li>分解(Divide)：将原问题分解成一系列子问题；</li>\n<li>解决(Conquer)：递归地解决各个子问题。若子问题足够小，则直接求解。</li>\n<li>合并(Combine)：将子问题的结果合并成原问题的解。</li>\n</ul>\n<p>合并排序(Merge Sort)是一个典型分治法的例子。其对应的直观的操作如下:</p>\n<p>分解： 将n个元素分成各含n&#x2F;2个元素的子序列；</p>\n<p>解决：用合并排序法对两个子序列递归地排序；</p>\n<p>合并：合并两个已排序的子序列以得到排序结果。</p>\n<h3 id=\"2-动态规划法\"><a href=\"#2-动态规划法\" class=\"headerlink\" title=\"2. 动态规划法\"></a>2. 动态规划法</h3><p>动态规划算法的设计可以分为如下4个步骤：</p>\n<ul>\n<li>描述最优解的结构</li>\n<li>递归定义最优解的值</li>\n<li>按自底向上的方式计算最优解的值</li>\n<li>由计算出的结果构造一个最优解</li>\n</ul>\n<p><strong>分治法是指将问题划分成一些独立的子问题，递归的求解各子问题，然后合并子问题的解而得到原问题的解。与此不同，动态规划适用于子问题独立且重叠的情况，也就是各子问题包含公共的子子问题。在这种情况下，若用分治法则会做许多不必要的工作，即重复地求解公共的子问题。动态规划算法对每个子子问题只求解一次，将其结果保存在一张表中，从而避免每次遇到各个子问题时重新计算答案。</strong></p>\n<p>适合采用动态规划方法的最优化问题中的两个要素：<strong>最优子结构</strong>和<strong>重叠子问题</strong>。</p>\n<p>最优子结构：如果问题的一个最优解中包含了子问题的最优解，则该问题具有最优子结构。</p>\n<p>重叠子问题：适用于动态规划求解的最优化问题必须具有的第二个要素是子问题的空间要很小，也就是用来求解原问题的递归算法反复地解同样的子问题，而不是总是在产生新的子问题。对两个子问题来说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，则它们是重叠的。</p>\n<p>In a word, <strong>分治法 —— 各子问题独立；动态规划 —— 各子问题重叠</strong>。</p>\n<p>算法导论： <strong>动态规划要求其子问题既要独立又要重叠，这看上去似乎有些奇怪。虽然这两点要求听起来可能矛盾的，但它们描述了两种不同的概念，而不是同一个问题的两个方面。如果同一个问题的两个子问题不共享资源，则它们就是独立的。对两个子问题俩说，如果它们确实是相同的子问题，只是作为不同问题的子问题出现的话，是重叠的，则它们是重叠</strong>。</p>\n"},{"title":"胜者树与败者树","_content":"\n胜者树与败者树是完全二叉树。就像是参加比赛一样，每个选手有不同的实力，两个选手PK,实力决定胜负，晋级下一轮，经过几轮之后，就能得到冠军。不同的是，胜者树的中间结点记录的是胜者的标号；而败者树的中间结点记录的败者的标号。 胜者树与败者树可以在log(n)的时间内找到最值。任何一个叶子结点的值改变后，利用中间结点的信息，还是能够快速地找到最值。在k路归并排序中经常用到。\n\n\n## 胜者树\n胜者树的一个优点是，如果一个选手的值改变了，可以很容易地修改这棵胜者树。只需要沿着从该结点到根结点的路径修改这棵二叉树，而不必改变其他比赛的结果。\n\n![fig1](img/胜者树败者树/fig1.jpg)\n\n上图是一个胜者树的示例。规定数值小者胜。\n1. b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；\n2. b3 PK b0，b3胜b0负，内部结点ls[2]的值为3；\n3. b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；\n4. b3 PK b1，b3胜b1负，内部结点ls[1]的值为3。\n\n取出胜者b3之后，叶子结点b3的值变为11时，重构的胜者树如下:\n\n![fig2](img/胜者树败者树/fig2.jpg)\n\n1. b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；\n2. b3 PK b0，b0胜b3负，内部结点ls[2]的值为0；\n3. b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；\n4. b0 PK b1，b1胜b0负，内部结点ls[1]的值为1。\n\n用胜者树对n个节点实现排序操作，构建胜者树和构建堆比较相似，区别在于胜者树只有叶子节点存放了数据，中间节点记录的是叶子节点间的关系。\n\n胜者树在每次重构时只需与其兄弟结点比较，一直到根节点选出胜者为止。\n\n## 败者树\n败者树是胜者树的一种变体。在败者树中，用父结点记录其左右子结点进行比赛的败者，而让胜者参加下一轮的比赛。败者树的根结点记录的是败者，需要加一个结点来记录整个比赛的胜利者。采用败者树可以简化重构的过程。\n\n![fig3](img/胜者树败者树/fig3.jpg)\n\n上图是一棵败者树。规定数大者败。\n\n1. b3 PK b4，b3胜b4负，内部结点ls[4]的值为4；\n2. b3 PK b0，b3胜b0负，内部结点ls[2]的值为0；\n3. b1 PK b2，b1胜b2负，内部结点ls[3]的值为2；\n4. b3 PK b1，b3胜b1负，内部结点ls[1]的值为1；\n\n败者树重构过程如下：\n- 将新进入选择树的结点与其父结点进行比赛：将败者存放在父结点中；而胜者再与上一级的父结点比较。\n- 比赛沿着到根结点的路径不断进行，直到ls[1]处。把败者存放在结点ls[1]中，胜者存放在ls[0]中。\n\n![fig4](img/胜者树败者树/fig4.jpg)\n\n## 胜者树、败者树、堆比较\n### 相同点  \n这三者空间和时间复杂度都是一样的。调整一次的时间复杂度都是O(logN)的。\n\n### 不同点\n一开始就是只有堆来完成多路归并的，但是人们发现堆每次取出最小值之后，把最后一个数放到堆顶，**调整堆的时候，每次都要选出父结点的两个孩子节点的最小值，然后再用孩子结点的最小值和父节点进行比较，所以每调整一层需要比较两次**。\n\n这时人们想能否简化比较过程，这时就有了胜者树。这样**每次比较只用跟自己的兄弟结点进行比较就好**，所以用胜者树可以比堆少一半的比较次数。\n\n而**胜者树想要比较兄弟结点首先要获得其父结点，也就是说需要访存两次**，这时人们又想能否再次减少比较次数，于是就有了败者树。败者树每个新元素上升时，**只需要获得父节点并比较即可**。\n\n总的来说，败者树与胜者树相比减少了访存时间。**现在程序的主要瓶颈在于访存了，计算倒几乎可以忽略不计了**。\n\n## 参考\n1. [胜者树和败者树](https://www.cnblogs.com/qianye/archive/2012/11/25/2787923.html#:~:text=%E8%83%9C%E8%80%85%E6%A0%91%E5%92%8C%E8%B4%A5%E8%80%85%E6%A0%91%E9%83%BD%E6%98%AF%E5%AE%8C%E5%85%A8,%E6%97%B6%E9%97%B4%E5%86%85%E6%89%BE%E5%88%B0%E6%9C%80%E5%80%BC%E3%80%82)\n2. [堆，赢者树，败者树的区别与联系](https://blog.csdn.net/haolexiao/article/details/53488314)\n\n","source":"_posts/胜者树败者树.md","raw":"---\ntitle: 胜者树与败者树\ntags: 算法\n---\n\n胜者树与败者树是完全二叉树。就像是参加比赛一样，每个选手有不同的实力，两个选手PK,实力决定胜负，晋级下一轮，经过几轮之后，就能得到冠军。不同的是，胜者树的中间结点记录的是胜者的标号；而败者树的中间结点记录的败者的标号。 胜者树与败者树可以在log(n)的时间内找到最值。任何一个叶子结点的值改变后，利用中间结点的信息，还是能够快速地找到最值。在k路归并排序中经常用到。\n\n\n## 胜者树\n胜者树的一个优点是，如果一个选手的值改变了，可以很容易地修改这棵胜者树。只需要沿着从该结点到根结点的路径修改这棵二叉树，而不必改变其他比赛的结果。\n\n![fig1](img/胜者树败者树/fig1.jpg)\n\n上图是一个胜者树的示例。规定数值小者胜。\n1. b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；\n2. b3 PK b0，b3胜b0负，内部结点ls[2]的值为3；\n3. b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；\n4. b3 PK b1，b3胜b1负，内部结点ls[1]的值为3。\n\n取出胜者b3之后，叶子结点b3的值变为11时，重构的胜者树如下:\n\n![fig2](img/胜者树败者树/fig2.jpg)\n\n1. b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；\n2. b3 PK b0，b0胜b3负，内部结点ls[2]的值为0；\n3. b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；\n4. b0 PK b1，b1胜b0负，内部结点ls[1]的值为1。\n\n用胜者树对n个节点实现排序操作，构建胜者树和构建堆比较相似，区别在于胜者树只有叶子节点存放了数据，中间节点记录的是叶子节点间的关系。\n\n胜者树在每次重构时只需与其兄弟结点比较，一直到根节点选出胜者为止。\n\n## 败者树\n败者树是胜者树的一种变体。在败者树中，用父结点记录其左右子结点进行比赛的败者，而让胜者参加下一轮的比赛。败者树的根结点记录的是败者，需要加一个结点来记录整个比赛的胜利者。采用败者树可以简化重构的过程。\n\n![fig3](img/胜者树败者树/fig3.jpg)\n\n上图是一棵败者树。规定数大者败。\n\n1. b3 PK b4，b3胜b4负，内部结点ls[4]的值为4；\n2. b3 PK b0，b3胜b0负，内部结点ls[2]的值为0；\n3. b1 PK b2，b1胜b2负，内部结点ls[3]的值为2；\n4. b3 PK b1，b3胜b1负，内部结点ls[1]的值为1；\n\n败者树重构过程如下：\n- 将新进入选择树的结点与其父结点进行比赛：将败者存放在父结点中；而胜者再与上一级的父结点比较。\n- 比赛沿着到根结点的路径不断进行，直到ls[1]处。把败者存放在结点ls[1]中，胜者存放在ls[0]中。\n\n![fig4](img/胜者树败者树/fig4.jpg)\n\n## 胜者树、败者树、堆比较\n### 相同点  \n这三者空间和时间复杂度都是一样的。调整一次的时间复杂度都是O(logN)的。\n\n### 不同点\n一开始就是只有堆来完成多路归并的，但是人们发现堆每次取出最小值之后，把最后一个数放到堆顶，**调整堆的时候，每次都要选出父结点的两个孩子节点的最小值，然后再用孩子结点的最小值和父节点进行比较，所以每调整一层需要比较两次**。\n\n这时人们想能否简化比较过程，这时就有了胜者树。这样**每次比较只用跟自己的兄弟结点进行比较就好**，所以用胜者树可以比堆少一半的比较次数。\n\n而**胜者树想要比较兄弟结点首先要获得其父结点，也就是说需要访存两次**，这时人们又想能否再次减少比较次数，于是就有了败者树。败者树每个新元素上升时，**只需要获得父节点并比较即可**。\n\n总的来说，败者树与胜者树相比减少了访存时间。**现在程序的主要瓶颈在于访存了，计算倒几乎可以忽略不计了**。\n\n## 参考\n1. [胜者树和败者树](https://www.cnblogs.com/qianye/archive/2012/11/25/2787923.html#:~:text=%E8%83%9C%E8%80%85%E6%A0%91%E5%92%8C%E8%B4%A5%E8%80%85%E6%A0%91%E9%83%BD%E6%98%AF%E5%AE%8C%E5%85%A8,%E6%97%B6%E9%97%B4%E5%86%85%E6%89%BE%E5%88%B0%E6%9C%80%E5%80%BC%E3%80%82)\n2. [堆，赢者树，败者树的区别与联系](https://blog.csdn.net/haolexiao/article/details/53488314)\n\n","slug":"胜者树败者树","published":1,"date":"2022-12-02T04:31:08.731Z","updated":"2022-12-02T04:52:53.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61a8pl0006lssge9ak1k7g","content":"<p>胜者树与败者树是完全二叉树。就像是参加比赛一样，每个选手有不同的实力，两个选手PK,实力决定胜负，晋级下一轮，经过几轮之后，就能得到冠军。不同的是，胜者树的中间结点记录的是胜者的标号；而败者树的中间结点记录的败者的标号。 胜者树与败者树可以在log(n)的时间内找到最值。任何一个叶子结点的值改变后，利用中间结点的信息，还是能够快速地找到最值。在k路归并排序中经常用到。</p>\n<h2 id=\"胜者树\"><a href=\"#胜者树\" class=\"headerlink\" title=\"胜者树\"></a>胜者树</h2><p>胜者树的一个优点是，如果一个选手的值改变了，可以很容易地修改这棵胜者树。只需要沿着从该结点到根结点的路径修改这棵二叉树，而不必改变其他比赛的结果。</p>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig1.jpg\" alt=\"fig1\"></p>\n<p>上图是一个胜者树的示例。规定数值小者胜。</p>\n<ol>\n<li>b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；</li>\n<li>b3 PK b0，b3胜b0负，内部结点ls[2]的值为3；</li>\n<li>b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；</li>\n<li>b3 PK b1，b3胜b1负，内部结点ls[1]的值为3。</li>\n</ol>\n<p>取出胜者b3之后，叶子结点b3的值变为11时，重构的胜者树如下:</p>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig2.jpg\" alt=\"fig2\"></p>\n<ol>\n<li>b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；</li>\n<li>b3 PK b0，b0胜b3负，内部结点ls[2]的值为0；</li>\n<li>b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；</li>\n<li>b0 PK b1，b1胜b0负，内部结点ls[1]的值为1。</li>\n</ol>\n<p>用胜者树对n个节点实现排序操作，构建胜者树和构建堆比较相似，区别在于胜者树只有叶子节点存放了数据，中间节点记录的是叶子节点间的关系。</p>\n<p>胜者树在每次重构时只需与其兄弟结点比较，一直到根节点选出胜者为止。</p>\n<h2 id=\"败者树\"><a href=\"#败者树\" class=\"headerlink\" title=\"败者树\"></a>败者树</h2><p>败者树是胜者树的一种变体。在败者树中，用父结点记录其左右子结点进行比赛的败者，而让胜者参加下一轮的比赛。败者树的根结点记录的是败者，需要加一个结点来记录整个比赛的胜利者。采用败者树可以简化重构的过程。</p>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig3.jpg\" alt=\"fig3\"></p>\n<p>上图是一棵败者树。规定数大者败。</p>\n<ol>\n<li>b3 PK b4，b3胜b4负，内部结点ls[4]的值为4；</li>\n<li>b3 PK b0，b3胜b0负，内部结点ls[2]的值为0；</li>\n<li>b1 PK b2，b1胜b2负，内部结点ls[3]的值为2；</li>\n<li>b3 PK b1，b3胜b1负，内部结点ls[1]的值为1；</li>\n</ol>\n<p>败者树重构过程如下：</p>\n<ul>\n<li>将新进入选择树的结点与其父结点进行比赛：将败者存放在父结点中；而胜者再与上一级的父结点比较。</li>\n<li>比赛沿着到根结点的路径不断进行，直到ls[1]处。把败者存放在结点ls[1]中，胜者存放在ls[0]中。</li>\n</ul>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig4.jpg\" alt=\"fig4\"></p>\n<h2 id=\"胜者树、败者树、堆比较\"><a href=\"#胜者树、败者树、堆比较\" class=\"headerlink\" title=\"胜者树、败者树、堆比较\"></a>胜者树、败者树、堆比较</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>这三者空间和时间复杂度都是一样的。调整一次的时间复杂度都是O(logN)的。</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>一开始就是只有堆来完成多路归并的，但是人们发现堆每次取出最小值之后，把最后一个数放到堆顶，<strong>调整堆的时候，每次都要选出父结点的两个孩子节点的最小值，然后再用孩子结点的最小值和父节点进行比较，所以每调整一层需要比较两次</strong>。</p>\n<p>这时人们想能否简化比较过程，这时就有了胜者树。这样<strong>每次比较只用跟自己的兄弟结点进行比较就好</strong>，所以用胜者树可以比堆少一半的比较次数。</p>\n<p>而<strong>胜者树想要比较兄弟结点首先要获得其父结点，也就是说需要访存两次</strong>，这时人们又想能否再次减少比较次数，于是就有了败者树。败者树每个新元素上升时，<strong>只需要获得父节点并比较即可</strong>。</p>\n<p>总的来说，败者树与胜者树相比减少了访存时间。<strong>现在程序的主要瓶颈在于访存了，计算倒几乎可以忽略不计了</strong>。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.cnblogs.com/qianye/archive/2012/11/25/2787923.html#:~:text=%E8%83%9C%E8%80%85%E6%A0%91%E5%92%8C%E8%B4%A5%E8%80%85%E6%A0%91%E9%83%BD%E6%98%AF%E5%AE%8C%E5%85%A8,%E6%97%B6%E9%97%B4%E5%86%85%E6%89%BE%E5%88%B0%E6%9C%80%E5%80%BC%E3%80%82\">胜者树和败者树</a></li>\n<li><a href=\"https://blog.csdn.net/haolexiao/article/details/53488314\">堆，赢者树，败者树的区别与联系</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>胜者树与败者树是完全二叉树。就像是参加比赛一样，每个选手有不同的实力，两个选手PK,实力决定胜负，晋级下一轮，经过几轮之后，就能得到冠军。不同的是，胜者树的中间结点记录的是胜者的标号；而败者树的中间结点记录的败者的标号。 胜者树与败者树可以在log(n)的时间内找到最值。任何一个叶子结点的值改变后，利用中间结点的信息，还是能够快速地找到最值。在k路归并排序中经常用到。</p>\n<h2 id=\"胜者树\"><a href=\"#胜者树\" class=\"headerlink\" title=\"胜者树\"></a>胜者树</h2><p>胜者树的一个优点是，如果一个选手的值改变了，可以很容易地修改这棵胜者树。只需要沿着从该结点到根结点的路径修改这棵二叉树，而不必改变其他比赛的结果。</p>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig1.jpg\" alt=\"fig1\"></p>\n<p>上图是一个胜者树的示例。规定数值小者胜。</p>\n<ol>\n<li>b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；</li>\n<li>b3 PK b0，b3胜b0负，内部结点ls[2]的值为3；</li>\n<li>b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；</li>\n<li>b3 PK b1，b3胜b1负，内部结点ls[1]的值为3。</li>\n</ol>\n<p>取出胜者b3之后，叶子结点b3的值变为11时，重构的胜者树如下:</p>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig2.jpg\" alt=\"fig2\"></p>\n<ol>\n<li>b3 PK b4，b3胜b4负，内部结点ls[4]的值为3；</li>\n<li>b3 PK b0，b0胜b3负，内部结点ls[2]的值为0；</li>\n<li>b1 PK b2，b1胜b2负，内部结点ls[3]的值为1；</li>\n<li>b0 PK b1，b1胜b0负，内部结点ls[1]的值为1。</li>\n</ol>\n<p>用胜者树对n个节点实现排序操作，构建胜者树和构建堆比较相似，区别在于胜者树只有叶子节点存放了数据，中间节点记录的是叶子节点间的关系。</p>\n<p>胜者树在每次重构时只需与其兄弟结点比较，一直到根节点选出胜者为止。</p>\n<h2 id=\"败者树\"><a href=\"#败者树\" class=\"headerlink\" title=\"败者树\"></a>败者树</h2><p>败者树是胜者树的一种变体。在败者树中，用父结点记录其左右子结点进行比赛的败者，而让胜者参加下一轮的比赛。败者树的根结点记录的是败者，需要加一个结点来记录整个比赛的胜利者。采用败者树可以简化重构的过程。</p>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig3.jpg\" alt=\"fig3\"></p>\n<p>上图是一棵败者树。规定数大者败。</p>\n<ol>\n<li>b3 PK b4，b3胜b4负，内部结点ls[4]的值为4；</li>\n<li>b3 PK b0，b3胜b0负，内部结点ls[2]的值为0；</li>\n<li>b1 PK b2，b1胜b2负，内部结点ls[3]的值为2；</li>\n<li>b3 PK b1，b3胜b1负，内部结点ls[1]的值为1；</li>\n</ol>\n<p>败者树重构过程如下：</p>\n<ul>\n<li>将新进入选择树的结点与其父结点进行比赛：将败者存放在父结点中；而胜者再与上一级的父结点比较。</li>\n<li>比赛沿着到根结点的路径不断进行，直到ls[1]处。把败者存放在结点ls[1]中，胜者存放在ls[0]中。</li>\n</ul>\n<p><img src=\"/img/%E8%83%9C%E8%80%85%E6%A0%91%E8%B4%A5%E8%80%85%E6%A0%91/fig4.jpg\" alt=\"fig4\"></p>\n<h2 id=\"胜者树、败者树、堆比较\"><a href=\"#胜者树、败者树、堆比较\" class=\"headerlink\" title=\"胜者树、败者树、堆比较\"></a>胜者树、败者树、堆比较</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>这三者空间和时间复杂度都是一样的。调整一次的时间复杂度都是O(logN)的。</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>一开始就是只有堆来完成多路归并的，但是人们发现堆每次取出最小值之后，把最后一个数放到堆顶，<strong>调整堆的时候，每次都要选出父结点的两个孩子节点的最小值，然后再用孩子结点的最小值和父节点进行比较，所以每调整一层需要比较两次</strong>。</p>\n<p>这时人们想能否简化比较过程，这时就有了胜者树。这样<strong>每次比较只用跟自己的兄弟结点进行比较就好</strong>，所以用胜者树可以比堆少一半的比较次数。</p>\n<p>而<strong>胜者树想要比较兄弟结点首先要获得其父结点，也就是说需要访存两次</strong>，这时人们又想能否再次减少比较次数，于是就有了败者树。败者树每个新元素上升时，<strong>只需要获得父节点并比较即可</strong>。</p>\n<p>总的来说，败者树与胜者树相比减少了访存时间。<strong>现在程序的主要瓶颈在于访存了，计算倒几乎可以忽略不计了</strong>。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.cnblogs.com/qianye/archive/2012/11/25/2787923.html#:~:text=%E8%83%9C%E8%80%85%E6%A0%91%E5%92%8C%E8%B4%A5%E8%80%85%E6%A0%91%E9%83%BD%E6%98%AF%E5%AE%8C%E5%85%A8,%E6%97%B6%E9%97%B4%E5%86%85%E6%89%BE%E5%88%B0%E6%9C%80%E5%80%BC%E3%80%82\">胜者树和败者树</a></li>\n<li><a href=\"https://blog.csdn.net/haolexiao/article/details/53488314\">堆，赢者树，败者树的区别与联系</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clb61a8pj0004lssgc4xd7g84","category_id":"clb61a8pm0007lssg81zx3uxf","_id":"clb61a8po000clssgadmf4a1k"}],"PostTag":[{"post_id":"clb61a8pi0003lssgdfjjfj29","tag_id":"clb61a8pk0005lssgfyhmd7uw","_id":"clb61a8pn0009lssg03zaakxz"},{"post_id":"clb61a8pj0004lssgc4xd7g84","tag_id":"clb61a8pk0005lssgfyhmd7uw","_id":"clb61a8po000blssgcbun6hq0"},{"post_id":"clb61a8pl0006lssge9ak1k7g","tag_id":"clb61a8pk0005lssgfyhmd7uw","_id":"clb61a8po000dlssg5m6idi2g"}],"Tag":[{"name":"算法","_id":"clb61a8pk0005lssgfyhmd7uw"}]}}